{"version":3,"sources":["webpack:///modules/dataquery/js/react.app.js","webpack:///webpack/bootstrap 8852a649345d4aba9697?fa4b****************","webpack:///./modules/dataquery/jsx/react.app.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Object","defineProperty","value","SavedQueriesList","React","createClass","displayName","getDefaultProps","componentDidMount","loadQuery","queryName","this","props","onSelectQuery","queryDetails","Fields","Conditions","render","curQuery","userSaved","globalSaved","queriesLoaded","createElement","i","userQueries","length","console","log","Meta","name","push","key","href","onClick","bind","globalQueries","className","data-toggle","role","aria-expanded","DataQueryApp","domNode","$","find","on","e","removeClass","target","classList","add","parentNode","promises","that","state","queryIDs","curRequest","Promise","resolve","ajax","loris","BaseURL","data","DocID","dataType","then","queries","savedQueries","_id","setState","component","all","ActiveTab","getAttribute","substr","saveFilterRule","rule","savedRule","field","operator","instrument","visit","saveFilterGroup","group","savedFilter","activeOperator","children","type","saveCurrentQuery","shared","override","filter","post","selectedFields","Filters","QueryName","SharedQuery","OverwriteQuery","JSON","parse","Shared","User","get","alertLoaded","alertSaved","alertConflict","show","fail","status","overrideQuery","getInitialState","displayType","fields","criteria","sessiondata","grouplevel","SavedQueries","rowData","session","AllSessions","downloadableFields","loading","loadFilterRule","script","url","success","async","category","fieldType","Type","allSessions","allCandiates","candidates","keys","loadFilterGroup","getSessions","loadSavedQuery","filterState","fieldsList","Array","isArray","map","item","fieldInfo","Field","split","Value","Operator","fieldSplit","Visits","allVisits","fieldVisitSelect","action","temp","fieldChange","fieldName","downloadable","slice","idx","indexOf","splice","stringify","runQuery","sessions","sectionedSessions","DocTypes","semaphore","ajaxComplete","rowdata","getRowData","field_split","sessionInfo","j","DocType","Sessions","row","rows","identifier","hasOwnProperty","doc","displayID","sort","currow","Identifiers","RowHeaders","fileData","sd","encodeURIComponent","colHeader","index","dismissAlert","resetQuery","changeDataDisplay","updateFilter","tabs","alert","InfoTabPane","TabId","UpdatedTime","Loading","FieldSelectTabPane","categories","onFieldChange","FilterSelectTabPane","ViewDataTabPane","Criteria","Data","RowInfo","FileData","onRunQueryClicked","StatsVisualizationTabPane","ManageSavedQueriesTabPane","onSaveQuery","aria-label","aria-hidden","class","widthClass","sideBar","FieldsSidebar","data-tabs","loadedQuery","window","RDataQueryApp","createFactory","default"],"mappings":"CAAS,SAAUA,SCInB,QAAAC,qBAAAC,UAGA,GAAAC,iBAAAD,UACA,MAAAC,kBAAAD,UAAAE,OAGA,IAAAC,QAAAF,iBAAAD,WACAE,WACAE,GAAAJ,SACAK,QAAA,EAUA,OANAP,SAAAE,UAAAM,KAAAH,OAAAD,QAAAC,cAAAD,QAAAH,qBAGAI,OAAAE,QAAA,EAGAF,OAAAD,QAvBA,GAAAD,oBAqCA,OATAF,qBAAAQ,EAAAT,QAGAC,oBAAAS,EAAAP,iBAGAF,oBAAAU,EAAA,GAGAV,oBAAA,KDMM,SAASI,OAAQD,SAEtB,YAEAQ,QAAOC,eAAeT,QAAS,cAC3BU,OAAO;;;;;;;;;AEnCZ,GAAIC,kBAAmBC,MAAMC,aAAYC,YAAA,mBACrCC,gBAAiB,aAGjBC,kBAAmB,aAEnBC,UAAW,SAASC,WAGhBC,KAAKC,MAAMC,cACPF,KAAKC,MAAME,aAAaJ,WAAWK,OACnCJ,KAAKC,MAAME,aAAaJ,WAAWM,aAG3CC,OAAQ,WAGJ,GAEIP,WAAWQ,SAFXC,aACAC,cAGJ,IAAGT,KAAKC,MAAMS,iBAAkB,EAC5B,MAAOjB,OAAAkB,cAAA,WAGX,KAAI,GAAIC,GAAI,EAAGA,EAAIZ,KAAKC,MAAMY,YAAYC,OAAQF,GAAK,EACnDL,SAAWP,KAAKC,MAAME,aAAaH,KAAKC,MAAMY,YAAYD,IAC1DG,QAAQC,IAAIT,SAASU,MAEjBlB,UADDQ,SAASU,MAAQV,SAASU,KAAKC,KAClBX,SAASU,KAAKC,KAEdlB,KAAKC,MAAMY,YAAYD,GAEvCJ,UAAUW,KAAK1B,MAAAkB,cAAA,MAAIS,IAAKpB,KAAKC,MAAMY,YAAYD,IAAInB,MAAAkB,cAAA,KAAGU,KAAK,IAAIC,QAAStB,KAAKF,UAAUyB,KAAKvB,KAAMA,KAAKC,MAAMY,YAAYD,KAAMb,YAGnI,KAAI,GAAIa,GAAI,EAAGA,EAAIZ,KAAKC,MAAMuB,cAAcV,OAAQF,GAAK,EACrDL,SAAWP,KAAKC,MAAME,aAAaH,KAAKC,MAAMuB,cAAcZ,IAC5DG,QAAQC,IAAIT,SAASU,MAEjBlB,UADDQ,SAASU,MAAQV,SAASU,KAAKC,KAClBX,SAASU,KAAKC,KAEdlB,KAAKC,MAAMuB,cAAcZ,GAEzCH,YAAYU,KAAK1B,MAAAkB,cAAA,MAAIS,IAAKpB,KAAKC,MAAMuB,cAAcZ,IAAInB,MAAAkB,cAAA,KAAGU,KAAK,IAAIC,QAAStB,KAAKF,UAAUyB,KAAKvB,KAAMA,KAAKC,MAAMuB,cAAcZ,KAAMb,YAEzI,OACKN,OAAAkB,cAAA,MAAIc,UAAU,6BACVhC,MAAAkB,cAAA,MAAIc,UAAU,YACVhC,MAAAkB,cAAA,KAAGU,KAAK,IAAII,UAAU,kBAAkBC,cAAY,WAAWC,KAAK,SAASC,gBAAc,SAA3F,oBAAoHnC,MAAAkB,cAAA,QAAMc,UAAU,WACpIhC,MAAAkB,cAAA,MAAIc,UAAU,gBAAgBE,KAAK,QAChClC,MAAAkB,cAAA,MAAIgB,KAAK,eAAeF,UAAU,mBAAlC,sBACCjB,UACDf,MAAAkB,cAAA,MAAIgB,KAAK,eAAeF,UAAU,mBAAlC,wBACChB,cAGRhB,MAAAkB,cAAA,MAAIgB,KAAK,gBAAelC,MAAAkB,cAAA,KAAGU,KAAK,mBAAmBK,cAAY,OAAvC,6BAUrCG,aAAepC,MAAMC,aAAYC,YAAA,eACjCE,kBAAmB,WAOf,GAAIiC,SAAU9B,IACd+B,GAAED,SAASE,KAAK,wBAAwBC,GAAG,eAAgB,SAASC,GAChEH,EAAED,SAASE,KAAK,MAAMG,YAAY,UAC/BD,EAAEE,SACDF,EAAEE,OAAOC,UAAUC,IAAI,UAEpBJ,EAAEE,OAAOG,YACRL,EAAEE,OAAOG,WAAWF,UAAUC,IAAI,YAM9C,IAAIE,aACAC,KAAOzC,IACX,KAAI,GAAIoB,OAAOpB,MAAK0C,MAAMC,SAAS,CAC/B5B,QAAQC,IAAIhB,KAAK0C,MAAMC,SAASvB,KAAK,GACrC,KAAK,GAAIR,GAAI,EAAGA,EAAIZ,KAAK0C,MAAMC,SAASvB,KAAKN,OAAQF,GAAK,EAAG,CACzD,GAAIgC,WACJA,YAAaC,QAAQC,QACbf,EAAEgB,KAAKC,MAAMC,QAAU,4DAA8DR,KAAKC,MAAMC,SAASvB,KAAKR,KAC1GsC,MACIC,MAAOV,KAAKC,MAAMC,SAASvB,KAAKR,IAEpCwC,SAAU,SACXC,KAAK,SAAS9D,OACb,GAAI+D,SAAUb,KAAKC,MAAMa,YAEzBD,SAAQ/D,MAAMiE,KAAOjE,MACrBkD,KAAKgB,UAAWF,aAAiBD,YAE7Cd,SAASrB,KAAKyB,aAItB,GAIIc,YAJUb,QAAQc,IAAInB,UAAUa,KAAK,SAAS9D,OAC9CkD,KAAKgB,UAAW/C,eAAkB,MAGtBV,KAChB+B,GAAE,wBAAwBE,GAAG,eAAgB,SAAUC,GACnDwB,UAAUD,UACNG,UAAW1B,EAAEE,OAAOyB,aAAa,QAAQC,OAAO,QAI5DC,eAAgB,SAASC,MAGrB,GAAIC,YACAC,MAAeF,KAAKE,MACpBC,SAAeH,KAAKG,SACpB5E,MAAeyE,KAAKzE,MACpB6E,WAAeJ,KAAKI,WACpBC,MAAeL,KAAKK,MAExB,OAAOJ,YAEXK,gBAAiB,SAASC,OAQtB,IAAI,GALAC,cACAC,eAAmBF,MAAME,eACzBC,aAGI9D,EAAI,EAAGA,EAAI2D,MAAMG,SAAS5D,OAAQF,IACR,SAA3B2D,MAAMG,SAAS9D,GAAG+D,KACjBH,YAAYE,SAASvD,KAAKnB,KAAK+D,eAAeQ,MAAMG,SAAS9D,KAC5B,UAA3B2D,MAAMG,SAAS9D,GAAG+D,MACxBH,YAAYE,SAASvD,KAAKnB,KAAKsE,gBAAgBC,MAAMG,SAAS9D,IAGtE,OAAO4D,cAEXI,iBAAkB,SAAS1D,KAAM2D,OAAQC,UAGrC,GAAIrC,MAAOzC,KACP+E,OAAS/E,KAAKsE,gBAAgBtE,KAAK0C,MAAMqC,OAE7ChD,GAAEiD,KAAKhC,MAAMC,QAAU,yDAEf7C,OAAQJ,KAAK0C,MAAMuC,eACnBC,QAASH,OACTI,UAAWjE,KACXkE,YAAaP,OACbQ,eAAgBP,UACjB,SAAS5B,MAER,GAAInE,IAAKuG,KAAKC,MAAMrC,MAAMnE,GACtB4D,SAAWF,KAAKC,MAAMC,QACrBmC,YACGD,UAAW,EACXlC,SAAS6C,OAAOrE,KAAKpC,IAErB4D,SAAS8C,KAAKtE,KAAKpC,KAG3BgD,EAAE2D,IAAI1C,MAAMC,QAAU,4DAA8DlE,GAAI,SAASQ,OACzF,GAAI+D,SAAUb,KAAKC,MAAMa,YAEzBD,SAAQ/D,MAAMiE,KAAOjE,MACrBkD,KAAKgB,UACDF,aAAiBD,QACjBX,SAAaA,SACbgD,aAAa,EACbC,YAAY,EACZC,eACIC,MAAM,SAIvBC,KAAK,SAAS7C,MACO,MAAhBA,KAAK8C,QACLvD,KAAKgB,UACDoC,eACIC,MAAM,EACNX,UAAWjE,KACXkE,YAAaP,aAOrCoB,cAAe,WACXjG,KAAK4E,iBACD5E,KAAK0C,MAAMmD,cAAcV,UACzBnF,KAAK0C,MAAMmD,cAAcT,aACzB,IAGRc,gBAAiB,WAGb,OACIC,YAAa,kBACbC,UACAC,YACAC,eACAC,WAAY,EACZ5D,SAAU3C,KAAKC,MAAMuG,aACrBjD,gBACA7C,eAAe,EACfiF,aAAa,EACbC,YAAY,EACZC,eACIC,MAAM,GAEVlC,UAAa,OACb6C,WACA1B,QACIJ,KAAM,QACNF,eAAgB,EAChBC,WAEQC,KAAM,SAGd+B,QAAS1G,KAAKC,MAAM0G,aAExB1B,kBACA2B,sBACAC,SAAU,IAGlBC,eAAgB,SAAS9C,MAGrB,GAAI+C,OACA/C,MAAKW,OACLX,KAAKW,KAAO,QAKhB5C,EAAEgB,MACEiE,IAAKhE,MAAMC,QAAU,6DACrBgE,QAAS,SAAS/D,MACdc,KAAKoC,OAASlD,MAElBgE,OAAO,EACPhE,MAAQiE,SAAUnD,KAAKI,YACvBhB,SAAU,QAId,KAAI,GAAIxC,GAAI,EAAGA,EAAIoD,KAAKoC,OAAOtF,OAAQF,IACnC,GAAGoD,KAAKoC,OAAOxF,GAAGQ,IAAI,KAAO4C,KAAKE,MAAM,CACpCF,KAAKoD,UAAYpD,KAAKoC,OAAOxF,GAAGrB,MAAM8H,IACtC,OAMR,OAAOrD,KAAKG,UACR,IAAK,QACD4C,OAAS,gBACT,MACJ,KAAK,WACDA,OAAS,mBACT,MACJ,KAAK,gBACDA,OAAS,wBACT,MACJ,KAAK,mBACDA,OAAS,2BACT,MACJ,KAAK,aACDA,OAAS,qBACT,MACJ,KAAK,WACDA,OAAS,oBA8CjB,MAzCAhF,GAAEgB,MACEiE,IAAKhE,MAAMC,QAAU,2CAA6C8D,OAClEE,QAAS,SAAS/D,MACd,GAAItC,GACA0G,eACAC,eAGJ,KAAI3G,EAAI,EAAGA,EAAIsC,KAAKpC,OAAQF,IACpB0G,YAAYpE,KAAKtC,GAAG,MACpB0G,YAAYpE,KAAKtC,GAAG,QAExB0G,YAAYpE,KAAKtC,GAAG,IAAIO,KAAK+B,KAAKtC,GAAG,IACjC2G,aAAarE,KAAKtC,GAAG,MACrB2G,aAAarE,KAAKtC,GAAG,QAEzB2G,aAAarE,KAAKtC,GAAG,IAAIO,KAAK+B,KAAKtC,GAAG,GAE1CoD,MAAKwD,YACDD,aAAiBA,aACjBD,YAAgBA,aAEF,OAAdtD,KAAKK,MACLL,KAAK0C,QAAUrH,OAAOoI,KAAKF,cAEvBD,YAAYtD,KAAKK,OACjBL,KAAK0C,QAAUY,YAAYtD,KAAKK,OAEhCL,KAAK0C,YAIjBQ,OAAO,EACPhE,MACIiE,SAAUnD,KAAKI,WACfF,MAAOF,KAAKE,MACZ3E,MAAOyE,KAAKzE,OAEhB6D,SAAU,SAGPY,MAEX0D,gBAAiB,SAASnD,OAItB,IAAI,GAAI3D,GAAI,EAAGA,EAAI2D,MAAMG,SAAS5D,OAAQF,IACnC2D,MAAMG,SAAS9D,GAAG6D,gBACbF,MAAMG,SAAS9D,GAAG+D,OAClBJ,MAAMG,SAAS9D,GAAG+D,KAAO,SAE7BJ,MAAMG,SAAS9D,GAAKZ,KAAK0H,gBAAgBnD,MAAMG,SAAS9D,KAExD2D,MAAMG,SAAS9D,GAAKZ,KAAK8G,eAAevC,MAAMG,SAAS9D,GAI/D,OADA2D,OAAMmC,QAAUiB,YAAYpD,OACrBA,OAEXqD,eAAgB,SAAUxB,OAAQC,UAG9B,GAAIwB,gBACA5C,kBACA6C,aAEJ,IADA9H,KAAKyD,UAAUoD,SAAY,IACxBkB,MAAMC,QAAQ3B,UAAU,CAKvBwB,aACIlD,KAAM,QACNF,eAAgB,EAChBC,aAEJmD,YAAYnD,SAAW2B,SAAS4B,IAAI,SAASC,MACzC,GAAIC,WAAYD,KAAKE,MAAMC,MAAM,IAQjC,QAPIrE,MACII,WAAe+D,UAAU,GACzBjE,MAAeiE,UAAU,GACzB5I,MAAe2I,KAAKI,MACpB3D,KAAe,OACfN,MAAe,OAEhB6D,KAAKK,UACR,IAAK,IACDvE,KAAKG,SAAW,OAChB,MACJ,KAAK,KACDH,KAAKG,SAAW,UAChB,MACJ,KAAK,KACDH,KAAKG,SAAW,eAChB,MACJ,KAAK,KACDH,KAAKG,SAAW,kBAChB,MACJ,SACIH,KAAKG,SAAW+D,KAAKK,SAG7B,MAAOvE,OAGX,IAAIwE,WACJV,YAAa1B,MACb,KAAI,GAAIxF,GAAI,EAAGA,EAAIwF,OAAOtF,OAAQF,IAE9B,GADA4H,WAAapC,OAAOxF,GAAGyH,MAAM,KACzBpD,eAAeuD,WAAW,IAQvB,CACHvD,eAAeuD,WAAW,IAAIA,WAAW,MACzC,KAAI,GAAIpH,OAAOpB,MAAKC,MAAMwI,OACtBxD,eAAeuD,WAAW,IAAIE,UAAUtH,OACxC6D,eAAeuD,WAAW,IAAIA,WAAW,IAAIpH,MAAQA,SAZ3B,CAC9B6D,eAAeuD,WAAW,OAC1BvD,eAAeuD,WAAW,IAAIA,WAAW,OACzCvD,eAAeuD,WAAW,IAAIE,YAC9B,KAAI,GAAItH,OAAOpB,MAAKC,MAAMwI,OACtBxD,eAAeuD,WAAW,IAAIE,UAAUtH,KAAO,EAC/C6D,eAAeuD,WAAW,IAAIA,WAAW,IAAIpH,MAAQA,UAU9D,CAEHyG,YAAcxB,SACdpB,eAAiBmB,MACjB,KAAI,GAAIhC,cAAcgC,QAClB,IAAI,GAAIlC,SAASkC,QAAOhC,YACP,cAAVF,OAGC4D,WAAW3G,KAAKiD,WAAa,IAAMF,OAKhD2D,YAAYnD,UAAYmD,YAAYnD,SAAS5D,OAAS,EACrD+G,YAAc7H,KAAK0H,gBAAgBG,cAEnCA,YAAYnD,WAEAC,KAAM,SAGlBkD,YAAYnB,QAAU1G,KAAKC,MAAM0G,aAErC3G,KAAKyD,SAAS,SAASf,OACpB,OACK0D,OAAQ0B,WACR7C,eAAgBA,eAChBF,OAAQ8C,YACRlC,aAAa,EACbC,YAAY,EACZiB,SAAS,MAIrB8B,iBAAkB,SAASC,OAAQvE,MAAOH,OAGtClE,KAAKyD,SAAS,SAASf,OACnB,GAAImG,MAAOnG,MAAMuC,eAAef,MAAME,WAsBtC,OArBc,UAAXwE,QAGCC,KAAK3E,MAAMA,OAAOG,OAASA,MACxBwE,KAAKH,UAAUrE,OACdwE,KAAKH,UAAUrE,SAEfwE,KAAKH,UAAUrE,OAAS,UAIrBwE,MAAK3E,MAAMA,OAAOG,OACI,IAA1BwE,KAAKH,UAAUrE,aAGPwE,MAAKH,UAAUrE,OAGtBwE,KAAKH,UAAUrE,UAGhBwE,QAGfC,YAAa,SAASC,UAAW5B,SAAU6B,cAGvC,GAAIvG,MAAOzC,IACXA,MAAKyD,SAAS,SAASf,OACnB,GAAIuC,gBAAiBvC,MAAMuC,eACvBmB,OAAS1D,MAAM0D,OAAO6C,MAAM,EAChC,IAAIhE,eAAekC,UAkBZ,GAAGlC,eAAekC,UAAU4B,WAAW,CAE1C,IAAI,GAAI3H,OAAO6D,gBAAekC,UAAU4B,WAEW,IAA5C9D,eAAekC,UAAUuB,UAAUtH,WAC3B6D,gBAAekC,UAAUuB,UAAUtH,KAE1C6D,eAAekC,UAAUuB,UAAUtH,aAGpC6D,gBAAekC,UAAU4B,UAGhC,IAAIG,KAAM9C,OAAO+C,QAAQhC,SAAW,IAAM4B,UAC1C3C,QAAOgD,OAAOF,IAAK,GAEiC,IAAjD7J,OAAOoI,KAAKxC,eAAekC,WAAWrG,cAG9BmE,gBAAekC,UAGvB6B,oBAEQtG,OAAMkE,mBAAmBO,SAAW,IAAM4B,eAElD,CAEC9D,eAAekC,UAAU4B,aACzB9D,eAAekC,UAAU4B,cAI7B,KAAI,GAAI3H,OAAO6D,gBAAekC,UAAUuB,UAC1B,aAAPtH,MAGH6D,eAAekC,UAAUuB,UAAUtH,OACnC6D,eAAekC,UAAU4B,WAAW3H,KAAOA,IAE/CgF,QAAOjF,KAAKgG,SAAW,IAAM4B,WAC1BC,eAECtG,MAAMkE,mBAAmBO,SAAW,IAAM4B,YAAa,OA7DlC,CAEzB9D,eAAekC,aAEflC,eAAekC,UAAU4B,WAAazD,KAAKC,MAAMD,KAAK+D,UAAU5G,KAAKxC,MAAMwI,SAE3ExD,eAAekC,UAAUuB,YACzB,KAAI,GAAItH,OAAOqB,MAAKxC,MAAMwI,OACtBxD,eAAekC,UAAUuB,UAAUtH,KAAO,CAI9CgF,QAAOjF,KAAKgG,SAAW,IAAM4B,WAE1BC,eAECtG,MAAMkE,mBAAmBO,SAAW,IAAM4B,YAAa,GAgD/D,OACI9D,eAAgBA,eAChBmB,OAAQA,WAIpBuB,YAAa,WAGT,MAAG3H,MAAK0C,MAAMqC,OAAOL,SAAS5D,OAAS,EAE5Bd,KAAK0C,MAAMqC,OAAO2B,QAGlB1G,KAAKC,MAAM0G,aAG1B2C,SAAU,SAASlD,OAAQmD,UAGvB,GAGIC,mBAHAC,YACAhH,KAAOzC,KACP0J,UAAY,EAEZC,aAAe,WAEX,GAAgB,GAAbD,UAAe,CACd,GAAIE,SAAUnH,KAAKoH,WAAWpH,KAAKC,MAAM6D,WACzC9D,MAAKgB,UACDgD,QAAWmD,QACX/C,SAAY,KAM5B7G,MAAKyD,UACDgD,WACAH,eACAO,SAAY,GAIhB,KAAI,GAAIjG,GAAI,EAAIA,EAAIwF,OAAOtF,OAAQF,GAAK,EAAG,CACvC,GAAIkJ,aAAc1D,OAAOxF,GAAGyH,MAAM,KAC9BlB,SAAW2C,YAAY,EAG3B,IAAGL,SAASN,QAAQhC,aAAc,EAAI,CAIlC,IAAK,GAHD4C,gBAGKC,EAAI,EAAGA,EAAIhK,KAAK0C,MAAMqC,OAAO2B,QAAQ5F,OAAQkJ,IAClD,GAAIjC,MAAMC,QAAQhI,KAAK0C,MAAMqC,OAAO2B,QAAQsD,IACrChK,KAAK0C,MAAMuC,eAAekC,UAAUuB,UAAU1I,KAAK0C,MAAMqC,OAAO2B,QAAQsD,GAAG,KAC1ED,YAAY5I,KAAKnB,KAAK0C,MAAMqC,OAAO2B,QAAQsD,QAG/C,KAAK,GAAI5I,OAAOpB,MAAK0C,MAAMuC,eAAekC,UAAUuB,UAAW,CAC3D,GAAIG,QAEJA,MAAK1H,KAAKnB,KAAK0C,MAAMqC,OAAO2B,QAAQsD,IAEpCnB,KAAK1H,KAAKC,KACV2I,YAAY5I,KAAK0H,MAK7BY,SAAStI,KAAKgG,UAEduC,YACAF,kBAAoBlE,KAAK+D,UAAUU,aACnChI,EAAEgB,MACE4B,KAAM,OACNqC,IAAKhE,MAAMC,QAAU,mEACrBC,MACI+G,QAAS9C,SACT+C,SAAUV,mBAEdpG,SAAU,OACV6D,QAAS,SAAS/D,MACd,GAAGA,KAAM,CACL,GAAItC,GAAGuJ,IAAKC,KAAMC,WACd/D,YAAc7D,KAAKC,MAAM4D,WAG7B,KAFApD,KAAOoC,KAAKC,MAAMrC,MAClBkH,KAAOlH,KAAKkH,KACRxJ,EAAI,EAAGA,EAAIwJ,KAAKtJ,OAAQF,GAAK,EAY7BuJ,IAAMC,KAAKxJ,GACXyJ,WAAaF,IAAI5K,MACb+G,YAAYgE,eAAeD,cAC3B/D,YAAY+D,gBAIhB/D,YAAY+D,YAAYF,IAAI/I,IAAI,IAAM+I,IAAII,GAG9C9H,MAAKgB,UAAW6C,YAAgBA,cAEpCvF,QAAQC,IAAI,iBACZ0I,YACAC,qBAMpBE,WAAY,SAASW,WAGjB,GAII5J,GAMAS,KAVAiF,YAActG,KAAK0C,MAAM4D,YAEzBF,QADWpG,KAAK2H,cACP3H,KAAK0C,MAAM0D,OAAOqE,QAC3B7D,mBAAqB5G,KAAK0C,MAAMkE,mBAEhCgD,WACAc,UACAC,eACAC,cACAC,WAGJ,IAAiB,IAAdL,UAAiB,CAIhB,IAAI5J,EAAI,EAAGwF,QAAUxF,EAAIwF,OAAOtF,OAAQF,GAAK,EACzCgK,WAAWzJ,KAAKiF,OAAOxF,GAI3B,KAAI,GAAI8F,WAAWJ,aAAY,CAE3B,IADAoE,UACI9J,EAAI,EAAGwF,QAAUxF,EAAIwF,OAAOtF,OAAQF,GAAK,EAAG,CAC5C,GAAI4H,YAAapC,OAAOxF,GAAGyH,MAAM,IAC7BqC,QAAO9J,GAAK,GAChB,IAAIkK,IAAKxE,YAAYI,QAClBoE,IAAGtC,WAAW,KAAOsC,GAAGtC,WAAW,IAAItF,KAAKsF,WAAW,KAAO5B,mBAAmBR,OAAOxF,KAEvFS,KAAO2B,MAAMC,QAAU,8BAAgC6H,GAAGtC,WAAW,IAAItF,KAAKsF,WAAW,IACzFkC,OAAO9J,GACHnB,MAAAkB,cAAA,KAAGU,KAAMA,MACJyJ,GAAGtC,WAAW,IAAItF,KAAKsF,WAAW,KAG3CqC,SAAS1J,KAAK,QAAU2J,GAAGtC,WAAW,IAAIhF,IAAM,IAAMuH,mBAAmBD,GAAGtC,WAAW,IAAItF,KAAKsF,WAAW,OACrGsC,GAAGtC,WAAW,MAEpBkC,OAAO9J,GAAKkK,GAAGtC,WAAW,IAAItF,KAAKsF,WAAW,KAGtDoB,QAAQzI,KAAKuJ,QACbC,YAAYxJ,KAAKuF,cAElB,CAGH,GACIrC,OAAOgG,WAAYxB,KAAMmC,UAAWC,MAAO7G,WAAYoE,WADvDC,SAIJ,KAAI,GAAI/B,WAAWJ,aACfuC,KAAOnC,QAAQ2B,MAAM,KACrBhE,MAAQwE,KAAK,GACRJ,OAAOpE,SACRoE,OAAOpE,QAAS,GAEpBgG,WAAaxB,KAAK,GACd8B,YAAYxB,QAAQkB,eAAgB,GACpCM,YAAYxJ,KAAKkJ,WAMzB,KAAIzJ,EAAI,EAAGwF,QAAUxF,EAAIwF,OAAOtF,OAAQF,GAAK,EACzC,IAAIyD,QAASoE,QACTI,KAAOzC,OAAOxF,GAAGyH,MAAM,KACvBjE,WAAapE,KAAK0C,MAAMuC,eAAe4D,KAAK,IACzCzE,YAAcA,WAAWyE,KAAK,KAAOzE,WAAWyE,KAAK,IAAIxE,QACxDuG,WAAWzJ,KAAKkD,MAAQ,IAAM+B,OAAOxF,GAMjD,KAAIyJ,aAAcM,aAAY,CAC1BD,SACA,KAAIM,YAAaJ,YACb/B,KAAO8B,YAAYN,YAAa,IAAMO,WAAWI,WAAW3C,MAAM,KAAK,GACvE4C,MAAQ3E,YAAYuC,MAChBoC,OAGApC,KAAOoC,MAAML,WAAWI,WAAW3C,MAAM,KAAK,GAAGA,MAAM,KAAK,IAC5DG,WAAaoC,WAAWI,WAAW3C,MAAM,KAAK,GAAGA,MAAM,KACpDQ,KACIA,KAAK3F,KAAK0H,WAAWI,WAAW3C,MAAM,KAAK,KAAOzB,mBAAmB4B,WAAW,GAAI,IAAMA,WAAW,KAEpGnH,KAAO2B,MAAMC,QAAU,8BAAgC4F,KAAK3F,KAAK0H,WAAWI,WAAW3C,MAAM,KAAK,IAClGQ,KACIpJ,MAAAkB,cAAA,KAAGU,KAAMA,MACJwH,KAAK3F,KAAK0H,WAAWI,WAAW3C,MAAM,KAAK,MAIpDQ,KAAOA,KAAK3F,KAAK0H,WAAWI,WAAW3C,MAAM,KAAK,IAGtDQ,KAAO,IAEX6B,OAAOvJ,KAAK0H,OAnBZ6B,OAAOvJ,KAAK,IAsBpByI,SAAQzI,KAAKuJ,SAGrB,OAAQd,QAAWA,QAASe,YAAeA,YAAaC,WAAcA,WAAYC,SAAYA,WAElGK,aAAc,WAEVlL,KAAKyD,UACDkC,aAAa,EACbC,YAAY,EACZC,eACIC,MAAM,MAIlBqF,WAAY,WAERnL,KAAKyD,UACD2C,UACAC,YACApB,qBAGRmG,kBAAmB,SAASZ,WAExB,GAAIZ,SAAU5J,KAAK6J,WAAWW,UAC9BxK,MAAKyD,UACD8C,WAAYiE,UACZ/D,QAASmD,WAGjByB,aAAc,SAAStG,QAEnB,GAAItC,MAAOzC,IACXA,MAAKyD,SAAS,SAASf,OAInB,MAH8B,KAA3BqC,OAAOL,SAAS5D,SACfiE,OAAO2B,QAAUjE,KAAKxC,MAAM0G,cAExB5B,OAAWA,WAG3BzE,OAAQ,WAGJ,GAAIgL,SAAyBC,MAAQ9L,MAAAkB,cAAA,WAGrC2K,MAAKnK,KAAK1B,MAAAkB,cAAC6K,aACHC,MAAM,OACNC,YAAa1L,KAAKC,MAAMyL,YACxBC,QAAS3L,KAAK0C,MAAMmE,WAI5ByE,KAAKnK,KAAK1B,MAAAkB,cAACiL,oBACHH,MAAM,eACNI,WAAY7L,KAAKC,MAAM4L,WACvBC,cAAe9L,KAAK8I,YACpB7D,eAAgBjF,KAAK0C,MAAMuC,eAC3BwD,OAAQzI,KAAKC,MAAMwI,OACnBE,iBAAoB3I,KAAK2I,iBACzBgD,QAAS3L,KAAK0C,MAAMmE,WAI5ByE,KAAKnK,KAAK1B,MAAAkB,cAACoL,qBACHN,MAAM,gBACNI,WAAY7L,KAAKC,MAAM4L,WACvB9G,OAAQ/E,KAAK0C,MAAMqC,OACnBsG,aAAcrL,KAAKqL,aACnB5C,OAAQzI,KAAKC,MAAMwI,OACnBkD,QAAS3L,KAAK0C,MAAMmE,UAK5B,IAAIV,aAAyC,IAA1BnG,KAAK0C,MAAM6D,WAAoB,kBAAoB,cACtE+E,MAAKnK,KAAK1B,MAAAkB,cAACqL,iBACHP,MAAM,WACNrL,OAAQJ,KAAK0C,MAAM0D,OACnB6F,SAAUjM,KAAK0C,MAAM2D,SACrB6D,SAAUlK,KAAK2H,cACfuE,KAAMlM,KAAK0C,MAAM+D,QAAQmD,QACzBuC,QAASnM,KAAK0C,MAAM+D,QAAQkE,YAC5BC,WAAY5K,KAAK0C,MAAM+D,QAAQmE,WAC/BwB,SAAUpM,KAAK0C,MAAM+D,QAAQoE,SAC7BwB,kBAAmBrM,KAAKsJ,SACxBnD,YAAaA,YACbiF,kBAAmBpL,KAAKoL,kBACxBO,QAAS3L,KAAK0C,MAAMmE,WAI5ByE,KAAKnK,KAAK1B,MAAAkB,cAAC2L,2BACHb,MAAM,aACNrL,OAAQJ,KAAK0C,MAAM+D,QAAQmE,WAC3BsB,KAAMlM,KAAK0C,MAAM+D,QAAQmD,QACzB+B,QAAS3L,KAAK0C,MAAMmE,WAI5ByE,KAAKnK,KAAK1B,MAAAkB,cAAC4L,2BAA0Bd,MAAM,kBAC3B5K,YAAab,KAAK0C,MAAMC,SAAS8C,KACjCjE,cAAexB,KAAK0C,MAAMC,SAAS6C,OACnCgH,YAAaxM,KAAK4E,iBAClBzE,aAAcH,KAAK0C,MAAMa,aACzB7C,cAAeV,KAAK0C,MAAMhC,cAC1BiL,QAAS3L,KAAK0C,MAAMmE,WAIjC7G,KAAK0C,MAAMiD,cACV4F,MACI9L,MAAAkB,cAAA,OAAKc,UAAU,sBAAsBE,KAAK,SACtClC,MAAAkB,cAAA,UAAQgE,KAAK,SAASlD,UAAU,QAAQgL,aAAW,QAAQnL,QAAStB,KAAKkL,cACrEzL,MAAAkB,cAAA,QAAM+L,cAAY,QAAlB,MAEJjN,MAAAkB,cAAA,yBAJJ,mBAULX,KAAK0C,MAAMkD,aACV2F,MACI9L,MAAAkB,cAAA,OAAKc,UAAU,sBAAsBE,KAAK,SACtClC,MAAAkB,cAAA,UAAQgE,KAAK,SAASlD,UAAU,QAAQgL,aAAW,QAAQnL,QAAStB,KAAKkL,cACrEzL,MAAAkB,cAAA,QAAM+L,cAAY,QAAlB,MAEJjN,MAAAkB,cAAA,yBAJJ,kBAULX,KAAK0C,MAAMmD,cAAcC,OACxByF,MACI9L,MAAAkB,cAAA,OAAKc,UAAU,sBAAsBE,KAAK,SACtClC,MAAAkB,cAAA,UAAQgE,KAAK,SAASlD,UAAU,QAAQgL,aAAW,QAAQnL,QAAStB,KAAKkL,cACrEzL,MAAAkB,cAAA,QAAM+L,cAAY,QAAlB,MAEJjN,MAAAkB,cAAA,UAAQgE,KAAK,SAASlD,UAAU,QAAQgL,aAAW,QAAQnL,QAAStB,KAAKkL,cACrEzL,MAAAkB,cAAA,QAAM+L,cAAY,QAAlB,aAEJjN,MAAAkB,cAAA,uBAPJ,4CAQIlB,MAAAkB,cAAA,KAAGU,KAAK,IAAIsL,MAAM,aAAarL,QAAStB,KAAKiG,eAA7C,2BAKZ,IAAI2G,YAAa,YACbC,QAAUpN,MAAAkB,cAAA,WAiBd,OAdGX,MAAK0C,MAAM0D,OAAOtF,OAAS,GACE,aAAzBd,KAAK0C,MAAMkB,WACc,eAAzB5D,KAAK0C,MAAMkB,WACc,SAAzB5D,KAAK0C,MAAMkB,YAEdgJ,WAAa,YACbC,QAAUpN,MAAAkB,cAAA,OAAKc,UAAU,YACjBhC,MAAAkB,cAACmM,eACG1M,OAAQJ,KAAK0C,MAAM0D,OACnB6F,SAAUjM,KAAK0C,MAAM2D,SACrB8E,WAAYnL,KAAKmL,eAI1B1L,MAAAkB,cAAA,WACM4K,MACD9L,MAAAkB,cAAA,OAAKc,UAAWmL,YACZnN,MAAAkB,cAAA,OAAKc,UAAU,gBACXhC,MAAAkB,cAAA,MAAIc,UAAU,2BAA2BsL,YAAU,QAC/CtN,MAAAkB,cAAA,MAAIgB,KAAK,eAAeF,UAAU,UAAShC,MAAAkB,cAAA,KAAGU,KAAK,QAAQK,cAAY,OAA5B,SAC3CjC,MAAAkB,cAAA,MAAIgB,KAAK,gBAAelC,MAAAkB,cAAA,KAAGU,KAAK,gBAAgBK,cAAY,OAApC,kBACxBjC,MAAAkB,cAAA,MAAIgB,KAAK,gBAAelC,MAAAkB,cAAA,KAAGU,KAAK,iBAAiBK,cAAY,OAArC,mBACxBjC,MAAAkB,cAAA,MAAIgB,KAAK,gBAAelC,MAAAkB,cAAA,KAAGU,KAAK,YAAYK,cAAY,OAAhC,cACxBjC,MAAAkB,cAAA,MAAIgB,KAAK,gBAAelC,MAAAkB,cAAA,KAAGU,KAAK,cAAcK,cAAY,OAAlC,0BAE5BjC,MAAAkB,cAACnB,kBACGqB,YAAab,KAAK0C,MAAMC,SAAS8C,KACjCjE,cAAexB,KAAK0C,MAAMC,SAAS6C,OACnCrF,aAAcH,KAAK0C,MAAMa,aACzB7C,cAAeV,KAAK0C,MAAMhC,cAC1BR,cAAeF,KAAK4H,eACpBoF,YAAahN,KAAK0C,MAAMsK,eAGhCvN,MAAAkB,cAAA,OAAKc,UAAU,eACV6J,OAGRuB,WAMrBI,QAAOzN,iBAAmBA,iBAC1ByN,OAAOpL,aAAeA,aACtBoL,OAAOC,cAAgBzN,MAAM0N,cAActL,cFoL1ChD,QAAQuO,QElLMvL","file":"./modules/dataquery/js/react.app.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/**\n\t *  The following file contains the base component for the data query react app.\n\t *  It also contains the component for the saved queries dropdown.\n\t *\n\t *  @author   Jordan Stirling <jstirling91@gmail.com>\n\t *  @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>\n\t *  @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3\n\t *  @link     https://github.com/mohadesz/Loris-Trunk\n\t */\n\t\n\t/*\n\t *  The following component is for saved queries dropdown which appears in the\n\t *  tab bar of the base component.\n\t */\n\tvar SavedQueriesList = React.createClass({\n\t    displayName: \"SavedQueriesList\",\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        queriesLoaded: false;\n\t    },\n\t    componentDidMount: function componentDidMount() {},\n\t    loadQuery: function loadQuery(queryName) {\n\t        // Loads in the selected query\n\t\n\t        this.props.onSelectQuery(this.props.queryDetails[queryName].Fields, this.props.queryDetails[queryName].Conditions);\n\t    },\n\t    render: function render() {\n\t        // Renders the html for the component\n\t\n\t        var userSaved = [];\n\t        var globalSaved = [];\n\t        var queryName, curQuery;\n\t\n\t        if (this.props.queriesLoaded === false) {\n\t            return React.createElement(\"div\", null);\n\t        }\n\t        // Build the list for the user queries\n\t        for (var i = 0; i < this.props.userQueries.length; i += 1) {\n\t            curQuery = this.props.queryDetails[this.props.userQueries[i]];\n\t            console.log(curQuery.Meta);\n\t            if (curQuery.Meta && curQuery.Meta.name) {\n\t                queryName = curQuery.Meta.name;\n\t            } else {\n\t                queryName = this.props.userQueries[i];\n\t            }\n\t            userSaved.push(React.createElement(\n\t                \"li\",\n\t                { key: this.props.userQueries[i] },\n\t                React.createElement(\n\t                    \"a\",\n\t                    { href: \"#\", onClick: this.loadQuery.bind(this, this.props.userQueries[i]) },\n\t                    queryName\n\t                )\n\t            ));\n\t        }\n\t        // Build the list for the global queries\n\t        for (var i = 0; i < this.props.globalQueries.length; i += 1) {\n\t            curQuery = this.props.queryDetails[this.props.globalQueries[i]];\n\t            console.log(curQuery.Meta);\n\t            if (curQuery.Meta && curQuery.Meta.name) {\n\t                queryName = curQuery.Meta.name;\n\t            } else {\n\t                queryName = this.props.globalQueries[i];\n\t            }\n\t            globalSaved.push(React.createElement(\n\t                \"li\",\n\t                { key: this.props.globalQueries[i] },\n\t                React.createElement(\n\t                    \"a\",\n\t                    { href: \"#\", onClick: this.loadQuery.bind(this, this.props.globalQueries[i]) },\n\t                    queryName\n\t                )\n\t            ));\n\t        }\n\t        return React.createElement(\n\t            \"ul\",\n\t            { className: \"nav nav-tabs navbar-right\" },\n\t            React.createElement(\n\t                \"li\",\n\t                { className: \"dropdown\" },\n\t                React.createElement(\n\t                    \"a\",\n\t                    { href: \"#\", className: \"dropdown-toggle\", \"data-toggle\": \"dropdown\", role: \"button\", \"aria-expanded\": \"false\" },\n\t                    \"Load Saved Query \",\n\t                    React.createElement(\"span\", { className: \"caret\" })\n\t                ),\n\t                React.createElement(\n\t                    \"ul\",\n\t                    { className: \"dropdown-menu\", role: \"menu\" },\n\t                    React.createElement(\n\t                        \"li\",\n\t                        { role: \"presentation\", className: \"dropdown-header\" },\n\t                        \"User Saved Queries\"\n\t                    ),\n\t                    userSaved,\n\t                    React.createElement(\n\t                        \"li\",\n\t                        { role: \"presentation\", className: \"dropdown-header\" },\n\t                        \"Shared Saved Queries\"\n\t                    ),\n\t                    globalSaved\n\t                )\n\t            ),\n\t            React.createElement(\n\t                \"li\",\n\t                { role: \"presentation\" },\n\t                React.createElement(\n\t                    \"a\",\n\t                    { href: \"#SavedQueriesTab\", \"data-toggle\": \"tab\" },\n\t                    \"Manage Saved Queries\"\n\t                )\n\t            )\n\t        );\n\t    }\n\t});\n\t\n\t/*\n\t *  The following component is the data queries base element. It controls which tab is currently\n\t *  shown, along with keeping the state of the current query being built and running the query.\n\t */\n\tvar DataQueryApp = React.createClass({\n\t    displayName: \"DataQueryApp\",\n\t\n\t    componentDidMount: function componentDidMount() {\n\t        // Before the dataquery is loaded into the window, this function is called to gather\n\t        // any data that was not passed in the initial load.\n\t\n\t        // The left and right menu items are part of the same menu, but bootstrap considers\n\t        // them two separate ones, so we need to make sure that only one is selected by removing\n\t        // \"active\" from all the tab classes and only adding it to the really active one\n\t        var domNode = this;\n\t        $(domNode).find('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n\t            $(domNode).find('li').removeClass(\"active\");\n\t            if (e.target) {\n\t                e.target.classList.add(\"active\");\n\t                // Both the <li> tag and the <a> tag should be active\n\t                if (e.target.parentNode) {\n\t                    e.target.parentNode.classList.add(\"active\");\n\t                }\n\t            }\n\t        });\n\t\n\t        // Load the save queries' details\n\t        var promises = [];\n\t        var that = this;\n\t        for (var key in this.state.queryIDs) {\n\t            console.log(this.state.queryIDs[key][0]);\n\t            for (var i = 0; i < this.state.queryIDs[key].length; i += 1) {\n\t                var curRequest;\n\t                curRequest = Promise.resolve($.ajax(loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=GetDoc.php&DocID=\" + that.state.queryIDs[key][i]), {\n\t                    data: {\n\t                        DocID: that.state.queryIDs[key][i]\n\t                    },\n\t                    dataType: 'json'\n\t                }).then(function (value) {\n\t                    var queries = that.state.savedQueries;\n\t\n\t                    queries[value._id] = value;\n\t                    that.setState({ 'savedQueries': queries });\n\t                });\n\t                promises.push(curRequest);\n\t            }\n\t        }\n\t\n\t        var allDone = Promise.all(promises).then(function (value) {\n\t            that.setState({ 'queriesLoaded': true });\n\t        });\n\t        var component = this;\n\t        $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n\t            component.setState({\n\t                ActiveTab: e.target.getAttribute(\"href\").substr(1)\n\t            });\n\t        });\n\t    },\n\t    saveFilterRule: function saveFilterRule(rule) {\n\t        // Used to build a filter rule for saving query\n\t\n\t        var savedRule = {\n\t            \"field\": rule.field,\n\t            \"operator\": rule.operator,\n\t            \"value\": rule.value,\n\t            \"instrument\": rule.instrument,\n\t            \"visit\": rule.visit\n\t        };\n\t        return savedRule;\n\t    },\n\t    saveFilterGroup: function saveFilterGroup(group) {\n\t        // Used to build a filter group for saving query\n\t\n\t        var savedFilter = {\n\t            \"activeOperator\": group.activeOperator,\n\t            \"children\": []\n\t        };\n\t        // Recursively build the filter groups children\n\t        for (var i = 0; i < group.children.length; i++) {\n\t            if (group.children[i].type === \"rule\") {\n\t                savedFilter.children.push(this.saveFilterRule(group.children[i]));\n\t            } else if (group.children[i].type === \"group\") {\n\t                savedFilter.children.push(this.saveFilterGroup(group.children[i]));\n\t            }\n\t        }\n\t        return savedFilter;\n\t    },\n\t    saveCurrentQuery: function saveCurrentQuery(name, shared, override) {\n\t        // Used to save the current query\n\t\n\t        var that = this,\n\t            filter = this.saveFilterGroup(this.state.filter);\n\t\n\t        $.post(loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=saveQuery.php\", {\n\t            Fields: this.state.selectedFields,\n\t            Filters: filter,\n\t            QueryName: name,\n\t            SharedQuery: shared,\n\t            OverwriteQuery: override\n\t        }, function (data) {\n\t            // Once saved, add the query to the list of saved queries\n\t            var id = JSON.parse(data).id,\n\t                queryIDs = that.state.queryIDs;\n\t            if (!override) {\n\t                if (shared === true) {\n\t                    queryIDs.Shared.push(id);\n\t                } else {\n\t                    queryIDs.User.push(id);\n\t                }\n\t            }\n\t            $.get(loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=GetDoc.php&DocID=\" + id, function (value) {\n\t                var queries = that.state.savedQueries;\n\t\n\t                queries[value._id] = value;\n\t                that.setState({\n\t                    'savedQueries': queries,\n\t                    'queryIDs': queryIDs,\n\t                    alertLoaded: false,\n\t                    alertSaved: true,\n\t                    alertConflict: {\n\t                        show: false\n\t                    }\n\t                });\n\t            });\n\t        }).fail(function (data) {\n\t            if (data.status === 409) {\n\t                that.setState({\n\t                    alertConflict: {\n\t                        show: true,\n\t                        QueryName: name,\n\t                        SharedQuery: shared\n\t                    }\n\t                });\n\t            }\n\t        });\n\t    },\n\t    overrideQuery: function overrideQuery() {\n\t        this.saveCurrentQuery(this.state.alertConflict.QueryName, this.state.alertConflict.SharedQuery, true);\n\t    },\n\t    getInitialState: function getInitialState() {\n\t        // Initialize the base state of the dataquery app\n\t\n\t        return {\n\t            displayType: 'Cross-sectional',\n\t            fields: [],\n\t            criteria: {},\n\t            sessiondata: {},\n\t            grouplevel: 0,\n\t            queryIDs: this.props.SavedQueries,\n\t            savedQueries: {},\n\t            queriesLoaded: false,\n\t            alertLoaded: false,\n\t            alertSaved: false,\n\t            alertConflict: {\n\t                show: false\n\t            },\n\t            ActiveTab: 'Info',\n\t            rowData: {},\n\t            filter: {\n\t                type: \"group\",\n\t                activeOperator: 0,\n\t                children: [{\n\t                    type: \"rule\"\n\t                }],\n\t                session: this.props.AllSessions\n\t            },\n\t            selectedFields: {},\n\t            downloadableFields: {},\n\t            loading: false\n\t        };\n\t    },\n\t    loadFilterRule: function loadFilterRule(rule) {\n\t        // Used to load in a filter rule\n\t\n\t        var script;\n\t        if (!rule.type) {\n\t            rule.type = \"rule\";\n\t        }\n\t\n\t        // Get given fields of the instrument for the rule.\n\t        // This call is made synchronously\n\t        $.ajax({\n\t            url: loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=datadictionary.php\",\n\t            success: function success(data) {\n\t                rule.fields = data;\n\t            },\n\t            async: false,\n\t            data: { category: rule.instrument },\n\t            dataType: 'json'\n\t        });\n\t\n\t        // Find the rules selected field's data type\n\t        for (var i = 0; i < rule.fields.length; i++) {\n\t            if (rule.fields[i].key[1] === rule.field) {\n\t                rule.fieldType = rule.fields[i].value.Type;\n\t                break;\n\t            }\n\t        }\n\t\n\t        // Get the sessions which meet the rules criterias.\n\t        // TODO:    Build the sessions in the new format\n\t        switch (rule.operator) {\n\t            case \"equal\":\n\t                script = \"queryEqual.php\";\n\t                break;\n\t            case \"notEqual\":\n\t                script = \"queryNotEqual.php\";\n\t                break;\n\t            case \"lessThanEqual\":\n\t                script = \"queryLessThanEqual.php\";\n\t                break;\n\t            case \"greaterThanEqual\":\n\t                script = \"queryGreaterThanEqual.php\";\n\t                break;\n\t            case \"startsWith\":\n\t                script = \"queryStartsWith.php\";\n\t                break;\n\t            case \"contains\":\n\t                script = \"queryContains.php\";\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        $.ajax({\n\t            url: loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=\" + script,\n\t            success: function success(data) {\n\t                var i,\n\t                    allSessions = {},\n\t                    allCandiates = {};\n\t                // Loop through data and divide into individual visits with unique PSCIDs\n\t                // storing a master list of unique PSCIDs\n\t                for (i = 0; i < data.length; i++) {\n\t                    if (!allSessions[data[i][1]]) {\n\t                        allSessions[data[i][1]] = [];\n\t                    }\n\t                    allSessions[data[i][1]].push(data[i][0]);\n\t                    if (!allCandiates[data[i][0]]) {\n\t                        allCandiates[data[i][0]] = [];\n\t                    }\n\t                    allCandiates[data[i][0]].push(data[i][1]);\n\t                }\n\t                rule.candidates = {\n\t                    \"allCandiates\": allCandiates,\n\t                    \"allSessions\": allSessions\n\t                };\n\t                if (rule.visit == \"All\") {\n\t                    rule.session = Object.keys(allCandiates);\n\t                } else {\n\t                    if (allSessions[rule.visit]) {\n\t                        rule.session = allSessions[rule.visit];\n\t                    } else {\n\t                        rule.session = [];\n\t                    }\n\t                }\n\t            },\n\t            async: false,\n\t            data: {\n\t                category: rule.instrument,\n\t                field: rule.field,\n\t                value: rule.value\n\t            },\n\t            dataType: 'json'\n\t        });\n\t\n\t        return rule;\n\t    },\n\t    loadFilterGroup: function loadFilterGroup(group) {\n\t        // Used to load in a filter group\n\t\n\t        // Recursively load the children on the group\n\t        for (var i = 0; i < group.children.length; i++) {\n\t            if (group.children[i].activeOperator) {\n\t                if (!group.children[i].type) {\n\t                    group.children[i].type = \"group\";\n\t                }\n\t                group.children[i] = this.loadFilterGroup(group.children[i]);\n\t            } else {\n\t                group.children[i] = this.loadFilterRule(group.children[i]);\n\t            }\n\t        }\n\t        group.session = getSessions(group);\n\t        return group;\n\t    },\n\t    loadSavedQuery: function loadSavedQuery(fields, criteria) {\n\t        // Used to load a saved query\n\t\n\t        var filterState = {},\n\t            selectedFields = {},\n\t            fieldsList = [];\n\t        this.setState({ \"loading\": true });\n\t        if (Array.isArray(criteria)) {\n\t            // This is used to load a query that is saved in the old format\n\t            // so translate it into the new format, grouping the given critiras\n\t            // into a filter group\n\t\n\t            filterState = {\n\t                type: \"group\",\n\t                activeOperator: 0,\n\t                children: []\n\t            };\n\t            filterState.children = criteria.map(function (item) {\n\t                var fieldInfo = item.Field.split(\",\");\n\t                rule = {\n\t                    \"instrument\": fieldInfo[0],\n\t                    \"field\": fieldInfo[1],\n\t                    \"value\": item.Value,\n\t                    \"type\": \"rule\",\n\t                    \"visit\": \"All\"\n\t                };\n\t                switch (item.Operator) {\n\t                    case \"=\":\n\t                        rule.operator = \"equal\";\n\t                        break;\n\t                    case \"!=\":\n\t                        rule.operator = \"notEqual\";\n\t                        break;\n\t                    case \"<=\":\n\t                        rule.operator = \"lessThanEqual\";\n\t                        break;\n\t                    case \">=\":\n\t                        rule.operator = \"greaterThanEqual\";\n\t                        break;\n\t                    default:\n\t                        rule.operator = item.Operator;\n\t                        break;\n\t                }\n\t                return rule;\n\t            });\n\t\n\t            var fieldSplit;\n\t            fieldsList = fields;\n\t            for (var i = 0; i < fields.length; i++) {\n\t                fieldSplit = fields[i].split(\",\");\n\t                if (!selectedFields[fieldSplit[0]]) {\n\t                    selectedFields[fieldSplit[0]] = {};\n\t                    selectedFields[fieldSplit[0]][fieldSplit[1]] = {};\n\t                    selectedFields[fieldSplit[0]].allVisits = {};\n\t                    for (var key in this.props.Visits) {\n\t                        selectedFields[fieldSplit[0]].allVisits[key] = 1;\n\t                        selectedFields[fieldSplit[0]][fieldSplit[1]][key] = [key];\n\t                    }\n\t                } else {\n\t                    selectedFields[fieldSplit[0]][fieldSplit[1]] = {};\n\t                    for (var key in this.props.Visits) {\n\t                        selectedFields[fieldSplit[0]].allVisits[key]++;\n\t                        selectedFields[fieldSplit[0]][fieldSplit[1]][key] = [key];\n\t                    }\n\t                }\n\t            }\n\t        } else {\n\t            // Query was saved in the new format\n\t            filterState = criteria;\n\t            selectedFields = fields;\n\t            for (var instrument in fields) {\n\t                for (var field in fields[instrument]) {\n\t                    if (field === \"allVisits\") {\n\t                        continue;\n\t                    } else {\n\t                        fieldsList.push(instrument + \",\" + field);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (filterState.children && filterState.children.length > 0) {\n\t            filterState = this.loadFilterGroup(filterState);\n\t        } else {\n\t            filterState.children = [{\n\t                type: \"rule\"\n\t            }];\n\t            filterState.session = this.props.AllSessions;\n\t        }\n\t        this.setState(function (state) {\n\t            return {\n\t                fields: fieldsList,\n\t                selectedFields: selectedFields,\n\t                filter: filterState,\n\t                alertLoaded: true,\n\t                alertSaved: false,\n\t                loading: false\n\t            };\n\t        });\n\t    },\n\t    fieldVisitSelect: function fieldVisitSelect(action, visit, field) {\n\t        // Used to select visits for a given field\n\t\n\t        this.setState(function (state) {\n\t            var temp = state.selectedFields[field.instrument];\n\t            if (action === \"check\") {\n\t                // Adding a new visit for field, add visit to field and\n\t                // increase count of visit in allVisits\n\t                temp[field.field][visit] = visit;\n\t                if (temp.allVisits[visit]) {\n\t                    temp.allVisits[visit]++;\n\t                } else {\n\t                    temp.allVisits[visit] = 1;\n\t                }\n\t            } else {\n\t                // Removing visit, delete visit from field\n\t                delete temp[field.field][visit];\n\t                if (temp.allVisits[visit] === 1) {\n\t                    // If visit count in allVisits is 1 delete visit from\n\t                    // allVisits\n\t                    delete temp.allVisits[visit];\n\t                } else {\n\t                    // Else decrement count of visit in allVisists\n\t                    temp.allVisits[visit]--;\n\t                }\n\t            }\n\t            return temp;\n\t        });\n\t    },\n\t    fieldChange: function fieldChange(fieldName, category, downloadable) {\n\t        // Used to add and remove fields from the current query being built\n\t\n\t        var that = this;\n\t        this.setState(function (state) {\n\t            var selectedFields = state.selectedFields,\n\t                fields = state.fields.slice(0);\n\t            if (!selectedFields[category]) {\n\t                // The given category has no selected fields, add the category to the selectedFields\n\t                selectedFields[category] = {};\n\t                // Add all visits to the givin field for the given category\n\t                selectedFields[category][fieldName] = JSON.parse(JSON.stringify(that.props.Visits));\n\t                // Add all visits to the given category, initalizing their counts to 1\n\t                selectedFields[category].allVisits = {};\n\t                for (var key in that.props.Visits) {\n\t                    selectedFields[category].allVisits[key] = 1;\n\t                }\n\t\n\t                // Add field to the field list\n\t                fields.push(category + \",\" + fieldName);\n\t\n\t                if (downloadable) {\n\t                    // If the field is downloadable add to the list of downloadable fields\n\t                    state.downloadableFields[category + \",\" + fieldName] = true;\n\t                }\n\t            } else if (selectedFields[category][fieldName]) {\n\t                // Remove the field from the selectedFields\n\t                for (var key in selectedFields[category][fieldName]) {\n\t                    // Decrement the count of field's visits, delete visit if count is 1\n\t                    if (selectedFields[category].allVisits[key] === 1) {\n\t                        delete selectedFields[category].allVisits[key];\n\t                    } else {\n\t                        selectedFields[category].allVisits[key]--;\n\t                    }\n\t                }\n\t                delete selectedFields[category][fieldName];\n\t\n\t                // Find the given field in the fields list and remove it\n\t                var idx = fields.indexOf(category + \",\" + fieldName);\n\t                fields.splice(idx, 1);\n\t\n\t                if (Object.keys(selectedFields[category]).length === 1) {\n\t                    // If no more fields left for category, delete category from\n\t                    // selectedFields\n\t                    delete selectedFields[category];\n\t                }\n\t\n\t                if (downloadable) {\n\t                    // If the field was downloadable, delete it from the downloadable list\n\t                    delete state.downloadableFields[category + \",\" + fieldName];\n\t                }\n\t            } else {\n\t                // The category already has fields but not the desired one, add it\n\t                if (!selectedFields[category][fieldName]) {\n\t                    selectedFields[category][fieldName] = {};\n\t                }\n\t\n\t                // Increment the visit count for the visit, setting it to 1 if doesn't exist\n\t                for (var key in selectedFields[category].allVisits) {\n\t                    if (key == \"allVisits\") {\n\t                        continue;\n\t                    }\n\t                    selectedFields[category].allVisits[key]++;\n\t                    selectedFields[category][fieldName][key] = key;\n\t                }\n\t                fields.push(category + \",\" + fieldName);\n\t                if (downloadable) {\n\t                    // If the field is downloadable add to the list of downloadable fields\n\t                    state.downloadableFields[category + \",\" + fieldName] = true;\n\t                }\n\t            }\n\t            return {\n\t                selectedFields: selectedFields,\n\t                fields: fields\n\t            };\n\t        });\n\t    },\n\t    getSessions: function getSessions() {\n\t        // Get the sessions to be selected\n\t\n\t        if (this.state.filter.children.length > 0) {\n\t            // If filter exists return filter sessions\n\t            return this.state.filter.session;\n\t        } else {\n\t            // Else return all sessions\n\t            return this.props.AllSessions;\n\t        }\n\t    },\n\t    runQuery: function runQuery(fields, sessions) {\n\t        // Run the current query\n\t\n\t        var DocTypes = [],\n\t            that = this,\n\t            semaphore = 0,\n\t            sectionedSessions,\n\t            ajaxComplete = function ajaxComplete() {\n\t            // Wait until all ajax calls have completed before computing the rowdata\n\t            if (semaphore == 0) {\n\t                var rowdata = that.getRowData(that.state.grouplevel);\n\t                that.setState({\n\t                    'rowData': rowdata,\n\t                    \"loading\": false\n\t                });\n\t            }\n\t        };\n\t\n\t        // Reset the rowData and sessiondata\n\t        this.setState({\n\t            \"rowData\": {},\n\t            \"sessiondata\": {},\n\t            \"loading\": true\n\t        });\n\t\n\t        // Get list of DocTypes to be retrieved\n\t        for (var i = 0; i < fields.length; i += 1) {\n\t            var field_split = fields[i].split(\",\");\n\t            var category = field_split[0];\n\t\n\t            // Check if the current category has already been queried, if so skip\n\t            if (DocTypes.indexOf(category) === -1) {\n\t                var sessionInfo = [];\n\t\n\t                // Build the session data to be queried for the given category\n\t                for (var j = 0; j < this.state.filter.session.length; j++) {\n\t                    if (Array.isArray(this.state.filter.session[j])) {\n\t                        if (this.state.selectedFields[category].allVisits[this.state.filter.session[j][1]]) {\n\t                            sessionInfo.push(this.state.filter.session[j]);\n\t                        }\n\t                    } else {\n\t                        for (var key in this.state.selectedFields[category].allVisits) {\n\t                            var temp = [];\n\t\n\t                            temp.push(this.state.filter.session[j]);\n\t                            // Add the visit to the temp variable then add to the sessions to be queried\n\t                            temp.push(key);\n\t                            sessionInfo.push(temp);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                DocTypes.push(category);\n\t                // keep track of the number of requests waiting for a response\n\t                semaphore++;\n\t                sectionedSessions = JSON.stringify(sessionInfo);\n\t                $.ajax({\n\t                    type: \"POST\",\n\t                    url: loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=retrieveCategoryDocs.php\",\n\t                    data: {\n\t                        DocType: category,\n\t                        Sessions: sectionedSessions\n\t                    },\n\t                    dataType: 'text',\n\t                    success: function success(data) {\n\t                        if (data) {\n\t                            var i,\n\t                                row,\n\t                                rows,\n\t                                identifier,\n\t                                sessiondata = that.state.sessiondata;\n\t                            data = JSON.parse(data);\n\t                            rows = data.rows;\n\t                            for (i = 0; i < rows.length; i += 1) {\n\t                                /*\n\t                                 * each row is a JSON object of the\n\t                                 * form:\n\t                                 * {\n\t                                 *  \"key\" : [category, pscid, vl],\n\t                                 *  \"value\" : [pscid, vl],\n\t                                 *  \"doc\": {\n\t                                 *      Meta: { stuff }\n\t                                 *      data: { \"FieldName\" : \"Value\", .. }\n\t                                 * }\n\t                                 */\n\t                                row = rows[i];\n\t                                identifier = row.value;\n\t                                if (!sessiondata.hasOwnProperty(identifier)) {\n\t                                    sessiondata[identifier] = {};\n\t                                }\n\t\n\t                                sessiondata[identifier][row.key[0]] = row.doc;\n\t                            }\n\t                            that.setState({ 'sessiondata': sessiondata });\n\t                        }\n\t                        console.log(\"Received data\");\n\t                        semaphore--;\n\t                        ajaxComplete();\n\t                    }\n\t                });\n\t            }\n\t        }\n\t    },\n\t    getRowData: function getRowData(displayID) {\n\t        // Build the queried data to be displayed in the data table\n\t\n\t        var sessiondata = this.state.sessiondata;\n\t        var sessions = this.getSessions();\n\t        var fields = this.state.fields.sort();\n\t        var downloadableFields = this.state.downloadableFields;\n\t        var i, j;\n\t        var rowdata = [];\n\t        var currow = [];\n\t        var Identifiers = [];\n\t        var RowHeaders = [];\n\t        var fileData = [];\n\t        var href;\n\t\n\t        if (displayID === 0) {\n\t            // Displaying the data in the cross-sectional way\n\t\n\t            // Add the fields as the tables headers\n\t            for (i = 0; fields && i < fields.length; i += 1) {\n\t                RowHeaders.push(fields[i]);\n\t            }\n\t\n\t            // Build the table rows, using the session data as the row identifier\n\t            for (var session in sessiondata) {\n\t                currow = [];\n\t                for (i = 0; fields && i < fields.length; i += 1) {\n\t                    var fieldSplit = fields[i].split(\",\");\n\t                    currow[i] = '.';\n\t                    var sd = sessiondata[session];\n\t                    if (sd[fieldSplit[0]] && sd[fieldSplit[0]].data[fieldSplit[1]] && downloadableFields[fields[i]]) {\n\t                        // If the current field has data and is downloadable, create a download link\n\t                        href = loris.BaseURL + \"/mri/jiv/get_file.php?file=\" + sd[fieldSplit[0]].data[fieldSplit[1]];\n\t                        currow[i] = React.createElement(\n\t                            \"a\",\n\t                            { href: href },\n\t                            sd[fieldSplit[0]].data[fieldSplit[1]]\n\t                        );\n\t                        fileData.push(\"file/\" + sd[fieldSplit[0]]._id + \"/\" + encodeURIComponent(sd[fieldSplit[0]].data[fieldSplit[1]]));\n\t                    } else if (sd[fieldSplit[0]]) {\n\t                        // else if field is not null add data and string\n\t                        currow[i] = sd[fieldSplit[0]].data[fieldSplit[1]];\n\t                    }\n\t                }\n\t                rowdata.push(currow);\n\t                Identifiers.push(session);\n\t            }\n\t        } else {\n\t            // Displaying the data in the longitudinal way\n\t\n\t            var Visits = {},\n\t                visit,\n\t                identifier,\n\t                temp,\n\t                colHeader,\n\t                index,\n\t                instrument,\n\t                fieldSplit;\n\t\n\t            // Loop trough session data building the row identifiers and desired visits\n\t            for (var session in sessiondata) {\n\t                temp = session.split(',');\n\t                visit = temp[1];\n\t                if (!Visits[visit]) {\n\t                    Visits[visit] = true;\n\t                }\n\t                identifier = temp[0];\n\t                if (Identifiers.indexOf(identifier) === -1) {\n\t                    Identifiers.push(identifier);\n\t                }\n\t            }\n\t\n\t            // Loop through the desired fields, adding a row header for each visit if it\n\t            // has been selected in the build phase\n\t            for (i = 0; fields && i < fields.length; i += 1) {\n\t                for (visit in Visits) {\n\t                    temp = fields[i].split(\",\");\n\t                    instrument = this.state.selectedFields[temp[0]];\n\t                    if (instrument && instrument[temp[1]] && instrument[temp[1]][visit]) {\n\t                        RowHeaders.push(visit + ' ' + fields[i]);\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Build the row data for the giving identifiers and headers\n\t            for (identifier in Identifiers) {\n\t                currow = [];\n\t                for (colHeader in RowHeaders) {\n\t                    temp = Identifiers[identifier] + ',' + RowHeaders[colHeader].split(' ')[0];\n\t                    index = sessiondata[temp];\n\t                    if (!index) {\n\t                        currow.push(\".\");\n\t                    } else {\n\t                        temp = index[RowHeaders[colHeader].split(',')[0].split(' ')[1]];\n\t                        fieldSplit = RowHeaders[colHeader].split(' ')[1].split(\",\");\n\t                        if (temp) {\n\t                            if (temp.data[RowHeaders[colHeader].split(',')[1]] && downloadableFields[fieldSplit[0] + ',' + fieldSplit[1]]) {\n\t                                // Add a downloadable link if the field is set and downloadable\n\t                                href = loris.BaseURL + \"/mri/jiv/get_file.php?file=\" + temp.data[RowHeaders[colHeader].split(',')[1]];\n\t                                temp = React.createElement(\n\t                                    \"a\",\n\t                                    { href: href },\n\t                                    temp.data[RowHeaders[colHeader].split(',')[1]]\n\t                                );\n\t                            } else {\n\t                                temp = temp.data[RowHeaders[colHeader].split(',')[1]];\n\t                            }\n\t                        } else {\n\t                            temp = '.';\n\t                        }\n\t                        currow.push(temp);\n\t                    }\n\t                }\n\t                rowdata.push(currow);\n\t            }\n\t        }\n\t        return { 'rowdata': rowdata, 'Identifiers': Identifiers, 'RowHeaders': RowHeaders, 'fileData': fileData };\n\t    },\n\t    dismissAlert: function dismissAlert() {\n\t        // Used to dismiss alerts\n\t        this.setState({\n\t            alertLoaded: false,\n\t            alertSaved: false,\n\t            alertConflict: {\n\t                show: false\n\t            }\n\t        });\n\t    },\n\t    resetQuery: function resetQuery() {\n\t        // Used to reset the current query\n\t        this.setState({\n\t            fields: [],\n\t            criteria: {},\n\t            selectedFields: {}\n\t        });\n\t    },\n\t    changeDataDisplay: function changeDataDisplay(displayID) {\n\t        // Change the display format of the data table\n\t        var rowdata = this.getRowData(displayID);\n\t        this.setState({\n\t            grouplevel: displayID,\n\t            rowData: rowdata\n\t        });\n\t    },\n\t    updateFilter: function updateFilter(filter) {\n\t        // Update the filter\n\t        var that = this;\n\t        this.setState(function (state) {\n\t            if (filter.children.length === 0) {\n\t                filter.session = that.props.AllSessions;\n\t            }\n\t            return { 'filter': filter };\n\t        });\n\t    },\n\t    render: function render() {\n\t        // Renders the html for the component\n\t\n\t        var tabs = [],\n\t            tabsNav = [],\n\t            alert = React.createElement(\"div\", null);\n\t\n\t        // Add the info tab\n\t        tabs.push(React.createElement(InfoTabPane, {\n\t            TabId: \"Info\",\n\t            UpdatedTime: this.props.UpdatedTime,\n\t            Loading: this.state.loading\n\t        }));\n\t\n\t        // Add the field select tab\n\t        tabs.push(React.createElement(FieldSelectTabPane, {\n\t            TabId: \"DefineFields\",\n\t            categories: this.props.categories,\n\t            onFieldChange: this.fieldChange,\n\t            selectedFields: this.state.selectedFields,\n\t            Visits: this.props.Visits,\n\t            fieldVisitSelect: this.fieldVisitSelect,\n\t            Loading: this.state.loading\n\t        }));\n\t\n\t        // Add the filter builder tab\n\t        tabs.push(React.createElement(FilterSelectTabPane, {\n\t            TabId: \"DefineFilters\",\n\t            categories: this.props.categories,\n\t            filter: this.state.filter,\n\t            updateFilter: this.updateFilter,\n\t            Visits: this.props.Visits,\n\t            Loading: this.state.loading\n\t        }));\n\t\n\t        // Define the data displayed type and add the view data tab\n\t        var displayType = this.state.grouplevel === 0 ? \"Cross-sectional\" : \"Longitudinal\";\n\t        tabs.push(React.createElement(ViewDataTabPane, {\n\t            TabId: \"ViewData\",\n\t            Fields: this.state.fields,\n\t            Criteria: this.state.criteria,\n\t            Sessions: this.getSessions(),\n\t            Data: this.state.rowData.rowdata,\n\t            RowInfo: this.state.rowData.Identifiers,\n\t            RowHeaders: this.state.rowData.RowHeaders,\n\t            FileData: this.state.rowData.fileData,\n\t            onRunQueryClicked: this.runQuery,\n\t            displayType: displayType,\n\t            changeDataDisplay: this.changeDataDisplay,\n\t            Loading: this.state.loading\n\t        }));\n\t\n\t        // Add the stats tab\n\t        tabs.push(React.createElement(StatsVisualizationTabPane, {\n\t            TabId: \"Statistics\",\n\t            Fields: this.state.rowData.RowHeaders,\n\t            Data: this.state.rowData.rowdata,\n\t            Loading: this.state.loading\n\t        }));\n\t\n\t        // Add the manage saved queries tab\n\t        tabs.push(React.createElement(ManageSavedQueriesTabPane, { TabId: \"SavedQueriesTab\",\n\t            userQueries: this.state.queryIDs.User,\n\t            globalQueries: this.state.queryIDs.Shared,\n\t            onSaveQuery: this.saveCurrentQuery,\n\t            queryDetails: this.state.savedQueries,\n\t            queriesLoaded: this.state.queriesLoaded,\n\t            Loading: this.state.loading\n\t        }));\n\t\n\t        // Display load alert if alert is present\n\t        if (this.state.alertLoaded) {\n\t            alert = React.createElement(\n\t                \"div\",\n\t                { className: \"alert alert-success\", role: \"alert\" },\n\t                React.createElement(\n\t                    \"button\",\n\t                    { type: \"button\", className: \"close\", \"aria-label\": \"Close\", onClick: this.dismissAlert },\n\t                    React.createElement(\n\t                        \"span\",\n\t                        { \"aria-hidden\": \"true\" },\n\t                        \"×\"\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    \"strong\",\n\t                    null,\n\t                    \"Success\"\n\t                ),\n\t                \" Query Loaded.\"\n\t            );\n\t        }\n\t\n\t        // Display save alert if alert is present\n\t        if (this.state.alertSaved) {\n\t            alert = React.createElement(\n\t                \"div\",\n\t                { className: \"alert alert-success\", role: \"alert\" },\n\t                React.createElement(\n\t                    \"button\",\n\t                    { type: \"button\", className: \"close\", \"aria-label\": \"Close\", onClick: this.dismissAlert },\n\t                    React.createElement(\n\t                        \"span\",\n\t                        { \"aria-hidden\": \"true\" },\n\t                        \"×\"\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    \"strong\",\n\t                    null,\n\t                    \"Success\"\n\t                ),\n\t                \" Query Saved.\"\n\t            );\n\t        }\n\t\n\t        // Display Conflict Query alert\n\t        if (this.state.alertConflict.show) {\n\t            alert = React.createElement(\n\t                \"div\",\n\t                { className: \"alert alert-warning\", role: \"alert\" },\n\t                React.createElement(\n\t                    \"button\",\n\t                    { type: \"button\", className: \"close\", \"aria-label\": \"Close\", onClick: this.dismissAlert },\n\t                    React.createElement(\n\t                        \"span\",\n\t                        { \"aria-hidden\": \"true\" },\n\t                        \"×\"\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    \"button\",\n\t                    { type: \"button\", className: \"close\", \"aria-label\": \"Close\", onClick: this.dismissAlert },\n\t                    React.createElement(\n\t                        \"span\",\n\t                        { \"aria-hidden\": \"true\" },\n\t                        \"Override\"\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    \"strong\",\n\t                    null,\n\t                    \"Error\"\n\t                ),\n\t                \" Query with the same name already exists.\",\n\t                React.createElement(\n\t                    \"a\",\n\t                    { href: \"#\", \"class\": \"alert-link\", onClick: this.overrideQuery },\n\t                    \"Click here to override\"\n\t                )\n\t            );\n\t        }\n\t\n\t        var widthClass = \"col-md-12\";\n\t        var sideBar = React.createElement(\"div\", null);\n\t\n\t        // Display the field sidebar for certain tabs\n\t        if (this.state.fields.length > 0 && this.state.ActiveTab !== 'ViewData' && this.state.ActiveTab !== 'Statistics' && this.state.ActiveTab !== 'Info') {\n\t            widthClass = \"col-md-10\";\n\t            sideBar = React.createElement(\n\t                \"div\",\n\t                { className: \"col-md-2\" },\n\t                React.createElement(FieldsSidebar, {\n\t                    Fields: this.state.fields,\n\t                    Criteria: this.state.criteria,\n\t                    resetQuery: this.resetQuery\n\t                })\n\t            );\n\t        }\n\t        return React.createElement(\n\t            \"div\",\n\t            null,\n\t            alert,\n\t            React.createElement(\n\t                \"div\",\n\t                { className: widthClass },\n\t                React.createElement(\n\t                    \"nav\",\n\t                    { className: \"nav nav-tabs\" },\n\t                    React.createElement(\n\t                        \"ul\",\n\t                        { className: \"nav nav-tabs navbar-left\", \"data-tabs\": \"tabs\" },\n\t                        React.createElement(\n\t                            \"li\",\n\t                            { role: \"presentation\", className: \"active\" },\n\t                            React.createElement(\n\t                                \"a\",\n\t                                { href: \"#Info\", \"data-toggle\": \"tab\" },\n\t                                \"Info\"\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            \"li\",\n\t                            { role: \"presentation\" },\n\t                            React.createElement(\n\t                                \"a\",\n\t                                { href: \"#DefineFields\", \"data-toggle\": \"tab\" },\n\t                                \"Define Fields\"\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            \"li\",\n\t                            { role: \"presentation\" },\n\t                            React.createElement(\n\t                                \"a\",\n\t                                { href: \"#DefineFilters\", \"data-toggle\": \"tab\" },\n\t                                \"Define Filters\"\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            \"li\",\n\t                            { role: \"presentation\" },\n\t                            React.createElement(\n\t                                \"a\",\n\t                                { href: \"#ViewData\", \"data-toggle\": \"tab\" },\n\t                                \"View Data\"\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            \"li\",\n\t                            { role: \"presentation\" },\n\t                            React.createElement(\n\t                                \"a\",\n\t                                { href: \"#Statistics\", \"data-toggle\": \"tab\" },\n\t                                \"Statistical Analysis\"\n\t                            )\n\t                        )\n\t                    ),\n\t                    React.createElement(SavedQueriesList, {\n\t                        userQueries: this.state.queryIDs.User,\n\t                        globalQueries: this.state.queryIDs.Shared,\n\t                        queryDetails: this.state.savedQueries,\n\t                        queriesLoaded: this.state.queriesLoaded,\n\t                        onSelectQuery: this.loadSavedQuery,\n\t                        loadedQuery: this.state.loadedQuery\n\t                    })\n\t                ),\n\t                React.createElement(\n\t                    \"div\",\n\t                    { className: \"tab-content\" },\n\t                    tabs\n\t                )\n\t            ),\n\t            sideBar\n\t        );\n\t    }\n\t});\n\t\n\twindow.SavedQueriesList = SavedQueriesList;\n\twindow.DataQueryApp = DataQueryApp;\n\twindow.RDataQueryApp = React.createFactory(DataQueryApp);\n\t\n\texports.default = DataQueryApp;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/dataquery/js/react.app.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8852a649345d4aba9697","/**\n *  The following file contains the base component for the data query react app.\n *  It also contains the component for the saved queries dropdown.\n *\n *  @author   Jordan Stirling <jstirling91@gmail.com>\n *  @author   Dave MacFarlane <david.macfarlane2@mcgill.ca>\n *  @license  http://www.gnu.org/licenses/gpl-3.0.txt GPLv3\n *  @link     https://github.com/mohadesz/Loris-Trunk\n */\n\n/*\n *  The following component is for saved queries dropdown which appears in the\n *  tab bar of the base component.\n */\nvar SavedQueriesList = React.createClass({\n    getDefaultProps: function() {\n        queriesLoaded: false\n    },\n    componentDidMount: function() {\n    },\n    loadQuery: function(queryName) {\n        // Loads in the selected query\n\n        this.props.onSelectQuery(\n            this.props.queryDetails[queryName].Fields,\n            this.props.queryDetails[queryName].Conditions\n        );\n    },\n    render: function() {\n        // Renders the html for the component\n\n        var userSaved = [];\n        var globalSaved = [];\n        var queryName, curQuery;\n\n        if(this.props.queriesLoaded === false) {\n            return <div />;\n        }\n        // Build the list for the user queries\n        for(var i = 0; i < this.props.userQueries.length; i += 1) {\n            curQuery = this.props.queryDetails[this.props.userQueries[i]];\n            console.log(curQuery.Meta);\n            if(curQuery.Meta && curQuery.Meta.name) {\n                queryName = curQuery.Meta.name;\n            } else {\n                queryName = this.props.userQueries[i];\n            }\n            userSaved.push(<li key={this.props.userQueries[i]}><a href=\"#\" onClick={this.loadQuery.bind(this, this.props.userQueries[i])}>{queryName}</a></li>);\n        }\n        // Build the list for the global queries\n        for(var i = 0; i < this.props.globalQueries.length; i += 1) {\n            curQuery = this.props.queryDetails[this.props.globalQueries[i]];\n            console.log(curQuery.Meta);\n            if(curQuery.Meta && curQuery.Meta.name) {\n                queryName = curQuery.Meta.name;\n            } else {\n                queryName = this.props.globalQueries[i];\n            }\n            globalSaved.push(<li key={this.props.globalQueries[i]}><a href=\"#\" onClick={this.loadQuery.bind(this, this.props.globalQueries[i])}>{queryName}</a></li>);\n        }\n        return (\n             <ul className=\"nav nav-tabs navbar-right\">\n                 <li className=\"dropdown\">\n                     <a href=\"#\" className=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Load Saved Query <span className=\"caret\"></span></a>\n                     <ul className=\"dropdown-menu\" role=\"menu\">\n                        <li role=\"presentation\" className=\"dropdown-header\">User Saved Queries</li>\n                        {userSaved}\n                        <li role=\"presentation\" className=\"dropdown-header\">Shared Saved Queries</li>\n                        {globalSaved}\n                     </ul>\n                 </li>\n                 <li role=\"presentation\"><a href=\"#SavedQueriesTab\" data-toggle=\"tab\">Manage Saved Queries</a></li>\n             </ul>\n            );\n    }\n});\n\n/*\n *  The following component is the data queries base element. It controls which tab is currently\n *  shown, along with keeping the state of the current query being built and running the query.\n */\nvar DataQueryApp = React.createClass({\n    componentDidMount: function() {\n        // Before the dataquery is loaded into the window, this function is called to gather\n        // any data that was not passed in the initial load.\n\n        // The left and right menu items are part of the same menu, but bootstrap considers\n        // them two separate ones, so we need to make sure that only one is selected by removing\n        // \"active\" from all the tab classes and only adding it to the really active one\n        var domNode = this;\n        $(domNode).find('a[data-toggle=\"tab\"]').on('shown.bs.tab', function(e) {\n            $(domNode).find('li').removeClass(\"active\");\n            if(e.target) {\n                e.target.classList.add(\"active\");\n                // Both the <li> tag and the <a> tag should be active\n                if(e.target.parentNode) {\n                    e.target.parentNode.classList.add(\"active\");\n                }\n            }\n        });\n\n        // Load the save queries' details\n        var promises = [];\n        var that = this;\n        for(var key in this.state.queryIDs){\n            console.log(this.state.queryIDs[key][0]);\n            for (var i = 0; i < this.state.queryIDs[key].length; i += 1) {\n                var curRequest;\n                curRequest = Promise.resolve(\n                        $.ajax(loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=GetDoc.php&DocID=\" + that.state.queryIDs[key][i]), {\n                            data: {\n                                DocID: that.state.queryIDs[key][i]\n                            },\n                            dataType: 'json'\n                        }).then(function(value) {\n                            var queries = that.state.savedQueries;\n\n                            queries[value._id] = value;\n                            that.setState({ 'savedQueries' : queries});\n                        });\n                promises.push(curRequest);\n            }\n        }\n\n        var allDone = Promise.all(promises).then(function(value) {\n            that.setState({ 'queriesLoaded' : true });\n\n        });\n        var component = this;\n        $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n            component.setState({\n                ActiveTab: e.target.getAttribute(\"href\").substr(1)\n            });\n        })\n    },\n    saveFilterRule: function(rule) {\n        // Used to build a filter rule for saving query\n\n        var savedRule = {\n            \"field\"      : rule.field,\n            \"operator\"   : rule.operator,\n            \"value\"      : rule.value,\n            \"instrument\" : rule.instrument,\n            \"visit\"      : rule.visit\n        }\n        return savedRule;\n    },\n    saveFilterGroup: function(group) {\n        // Used to build a filter group for saving query\n\n        var savedFilter = {\n            \"activeOperator\" : group.activeOperator,\n            \"children\"       : []\n        };\n        // Recursively build the filter groups children\n        for(var i = 0; i < group.children.length; i++) {\n            if(group.children[i].type === \"rule\") {\n                savedFilter.children.push(this.saveFilterRule(group.children[i]));\n            } else if(group.children[i].type === \"group\") {\n                savedFilter.children.push(this.saveFilterGroup(group.children[i]));\n            }\n        }\n        return savedFilter;\n    },\n    saveCurrentQuery: function(name, shared, override) {\n        // Used to save the current query\n\n        var that = this,\n            filter = this.saveFilterGroup(this.state.filter);\n\n        $.post(loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=saveQuery.php\",\n            {\n                Fields: this.state.selectedFields,\n                Filters: filter,\n                QueryName: name,\n                SharedQuery: shared,\n                OverwriteQuery: override\n            }, function(data) {\n                // Once saved, add the query to the list of saved queries\n                var id = JSON.parse(data).id,\n                    queryIDs = that.state.queryIDs;\n                if (!override) {\n                    if (shared === true) {\n                        queryIDs.Shared.push(id);\n                    } else {\n                        queryIDs.User.push(id);\n                    }\n                }\n                $.get(loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=GetDoc.php&DocID=\" + id, function(value) {\n                        var queries = that.state.savedQueries;\n\n                        queries[value._id] = value;\n                        that.setState({\n                            'savedQueries' : queries,\n                            'queryIDs' : queryIDs,\n                            alertLoaded: false,\n                            alertSaved: true,\n                            alertConflict: {\n                                show: false\n                            }\n                        });\n                    });\n            }).fail(function(data) {\n                if (data.status === 409) {\n                    that.setState({\n                        alertConflict: {\n                            show: true,\n                            QueryName: name,\n                            SharedQuery: shared\n                        }\n                    })\n                }\n            });\n\n    },\n    overrideQuery: function () {\n        this.saveCurrentQuery(\n            this.state.alertConflict.QueryName,\n            this.state.alertConflict.SharedQuery,\n            true\n        )\n    },\n    getInitialState: function() {\n        // Initialize the base state of the dataquery app\n\n        return {\n            displayType: 'Cross-sectional',\n            fields: [],\n            criteria: {},\n            sessiondata: {},\n            grouplevel: 0,\n            queryIDs: this.props.SavedQueries,\n            savedQueries: {},\n            queriesLoaded: false,\n            alertLoaded: false,\n            alertSaved: false,\n            alertConflict: {\n                show: false\n            },\n            ActiveTab :  'Info',\n            rowData: {},\n            filter: {\n                type: \"group\",\n                activeOperator: 0,\n                children: [\n                    {\n                        type: \"rule\"\n                    }\n                ],\n                session: this.props.AllSessions\n            },\n            selectedFields : {},\n            downloadableFields : {},\n            loading : false\n        };\n    },\n    loadFilterRule: function(rule) {\n        // Used to load in a filter rule\n\n        var script;\n        if(!rule.type){\n            rule.type = \"rule\"\n        }\n\n        // Get given fields of the instrument for the rule.\n        // This call is made synchronously\n        $.ajax({\n            url: loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=datadictionary.php\",\n            success: function(data) {\n                rule.fields = data;\n            },\n            async: false,\n            data: { category: rule.instrument },\n            dataType: 'json'\n        });\n\n        // Find the rules selected field's data type\n        for(var i = 0; i < rule.fields.length; i++){\n            if(rule.fields[i].key[1] === rule.field){\n                rule.fieldType = rule.fields[i].value.Type;\n                break;\n            }\n        }\n\n        // Get the sessions which meet the rules criterias.\n// TODO:    Build the sessions in the new format\n        switch(rule.operator) {\n            case \"equal\":\n                script = \"queryEqual.php\";\n                break;\n            case \"notEqual\":\n                script = \"queryNotEqual.php\";\n                break;\n            case \"lessThanEqual\":\n                script = \"queryLessThanEqual.php\";\n                break;\n            case \"greaterThanEqual\":\n                script = \"queryGreaterThanEqual.php\";\n                break;\n            case \"startsWith\":\n                script = \"queryStartsWith.php\";\n                break;\n            case \"contains\":\n                script = \"queryContains.php\";\n                break;\n            default:\n                break;\n        }\n        $.ajax({\n            url: loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=\" + script,\n            success: function(data) {\n                var i,\n                    allSessions = {},\n                    allCandiates = {};\n                // Loop through data and divide into individual visits with unique PSCIDs\n                // storing a master list of unique PSCIDs\n                for(i = 0; i < data.length; i++){\n                    if(!allSessions[data[i][1]]){\n                        allSessions[data[i][1]] = [];\n                    }\n                    allSessions[data[i][1]].push(data[i][0]);\n                    if(!allCandiates[data[i][0]]){\n                        allCandiates[data[i][0]] = []\n                    }\n                    allCandiates[data[i][0]].push(data[i][1]);\n                }\n                rule.candidates = {\n                    \"allCandiates\" : allCandiates,\n                    \"allSessions\" : allSessions\n                };\n                if (rule.visit == \"All\") {\n                    rule.session = Object.keys(allCandiates);\n                } else {\n                    if (allSessions[rule.visit]) {\n                        rule.session = allSessions[rule.visit];\n                    } else {\n                        rule.session = [];\n                    }\n                }\n            },\n            async: false,\n            data: {\n                category: rule.instrument,\n                field: rule.field,\n                value: rule.value\n            },\n            dataType: 'json'\n        });\n\n        return rule;\n    },\n    loadFilterGroup: function(group) {\n        // Used to load in a filter group\n\n        // Recursively load the children on the group\n        for(var i = 0; i < group.children.length; i++){\n            if(group.children[i].activeOperator) {\n                if(!group.children[i].type){\n                    group.children[i].type = \"group\"\n                }\n                group.children[i] = this.loadFilterGroup(group.children[i]);\n            } else {\n                group.children[i] = this.loadFilterRule(group.children[i]);\n            }\n        }\n        group.session = getSessions(group);\n        return group;\n    },\n    loadSavedQuery: function (fields, criteria) {\n        // Used to load a saved query\n\n        var filterState = {},\n            selectedFields = {},\n            fieldsList = [];\n        this.setState({\"loading\" : true});\n        if(Array.isArray(criteria)){\n            // This is used to load a query that is saved in the old format\n            // so translate it into the new format, grouping the given critiras\n            // into a filter group\n\n            filterState = {\n                type: \"group\",\n                activeOperator: 0,\n                children: []\n            };\n            filterState.children = criteria.map(function(item){\n                var fieldInfo = item.Field.split(\",\");\n                    rule = {\n                        \"instrument\" : fieldInfo[0],\n                        \"field\"      : fieldInfo[1],\n                        \"value\"      : item.Value,\n                        \"type\"       : \"rule\",\n                        \"visit\"      : \"All\"\n                    };\n                switch(item.Operator) {\n                    case \"=\":\n                        rule.operator = \"equal\";\n                        break;\n                    case \"!=\":\n                        rule.operator = \"notEqual\";\n                        break;\n                    case \"<=\":\n                        rule.operator = \"lessThanEqual\";\n                        break;\n                    case \">=\":\n                        rule.operator = \"greaterThanEqual\";\n                        break;\n                    default:\n                        rule.operator = item.Operator;\n                        break;\n                }\n                return rule;\n            });\n\n            var fieldSplit;\n            fieldsList = fields;\n            for(var i = 0; i < fields.length; i++){\n                fieldSplit = fields[i].split(\",\");\n                if(!selectedFields[fieldSplit[0]]){\n                    selectedFields[fieldSplit[0]] = {};\n                    selectedFields[fieldSplit[0]][fieldSplit[1]] = {};\n                    selectedFields[fieldSplit[0]].allVisits = {};\n                    for(var key in this.props.Visits){\n                        selectedFields[fieldSplit[0]].allVisits[key] = 1;\n                        selectedFields[fieldSplit[0]][fieldSplit[1]][key] = [key];\n                    }\n                } else {\n                    selectedFields[fieldSplit[0]][fieldSplit[1]] = {};\n                    for(var key in this.props.Visits){\n                        selectedFields[fieldSplit[0]].allVisits[key]++;\n                        selectedFields[fieldSplit[0]][fieldSplit[1]][key] = [key];\n                    }\n                }\n            }\n        } else {\n            // Query was saved in the new format\n            filterState = criteria;\n            selectedFields = fields;\n            for(var instrument in fields){\n                for(var field in fields[instrument]){\n                    if(field === \"allVisits\"){\n                        continue;\n                    } else {\n                        fieldsList.push(instrument + \",\" + field);\n                    }\n                }\n            }\n        }\n        if(filterState.children && filterState.children.length > 0){\n            filterState = this.loadFilterGroup(filterState);\n        } else {\n            filterState.children = [\n                    {\n                        type: \"rule\"\n                    }\n            ];\n            filterState.session = this.props.AllSessions;\n        }\n        this.setState(function(state) {\n           return  {\n                fields: fieldsList,\n                selectedFields: selectedFields,\n                filter: filterState,\n                alertLoaded: true,\n                alertSaved: false,\n                loading: false\n            }\n        });\n    },\n    fieldVisitSelect: function(action, visit, field) {\n        // Used to select visits for a given field\n\n        this.setState(function(state){\n            var temp = state.selectedFields[field.instrument];\n            if(action === \"check\") {\n                // Adding a new visit for field, add visit to field and\n                // increase count of visit in allVisits\n                temp[field.field][visit] = visit;\n                if(temp.allVisits[visit]){\n                    temp.allVisits[visit]++;\n                } else {\n                    temp.allVisits[visit] = 1;\n                }\n            } else {\n                // Removing visit, delete visit from field\n                delete temp[field.field][visit];\n                if(temp.allVisits[visit] === 1){\n                    // If visit count in allVisits is 1 delete visit from\n                    // allVisits\n                    delete temp.allVisits[visit];\n                } else {\n                    // Else decrement count of visit in allVisists\n                    temp.allVisits[visit]--;\n                }\n            }\n            return temp;\n        });\n    },\n    fieldChange: function(fieldName, category, downloadable) {\n        // Used to add and remove fields from the current query being built\n\n        var that = this;\n        this.setState(function(state){\n            var selectedFields = state.selectedFields,\n                fields = state.fields.slice(0);\n            if(!selectedFields[category]){\n                // The given category has no selected fields, add the category to the selectedFields\n                selectedFields[category] = {};\n                // Add all visits to the givin field for the given category\n                selectedFields[category][fieldName] = JSON.parse(JSON.stringify(that.props.Visits));\n                // Add all visits to the given category, initalizing their counts to 1\n                selectedFields[category].allVisits = {};\n                for(var key in that.props.Visits){\n                    selectedFields[category].allVisits[key] = 1;\n                }\n\n                // Add field to the field list\n                fields.push(category + \",\" + fieldName);\n\n                if(downloadable){\n                    // If the field is downloadable add to the list of downloadable fields\n                    state.downloadableFields[category + \",\" + fieldName] = true;\n                }\n            } else if(selectedFields[category][fieldName]){\n                // Remove the field from the selectedFields\n                for(var key in selectedFields[category][fieldName]){\n                    // Decrement the count of field's visits, delete visit if count is 1\n                    if(selectedFields[category].allVisits[key] === 1){\n                        delete selectedFields[category].allVisits[key];\n                    } else {\n                        selectedFields[category].allVisits[key]--;\n                    }\n                }\n                delete selectedFields[category][fieldName];\n\n                // Find the given field in the fields list and remove it\n                var idx = fields.indexOf(category + \",\" + fieldName);\n                fields.splice(idx, 1);\n\n                if(Object.keys(selectedFields[category]).length === 1){\n                    // If no more fields left for category, delete category from\n                    // selectedFields\n                    delete selectedFields[category];\n                }\n\n                if(downloadable){\n                    // If the field was downloadable, delete it from the downloadable list\n                    delete state.downloadableFields[category + \",\" + fieldName];\n                }\n            } else {\n                // The category already has fields but not the desired one, add it\n                if(!selectedFields[category][fieldName]) {\n                    selectedFields[category][fieldName] = {};\n                }\n\n                // Increment the visit count for the visit, setting it to 1 if doesn't exist\n                for(var key in selectedFields[category].allVisits){\n                    if(key == \"allVisits\") {\n                        continue;\n                    }\n                    selectedFields[category].allVisits[key]++;\n                    selectedFields[category][fieldName][key] = key;\n                }\n                fields.push(category + \",\" + fieldName);\n                if(downloadable){\n                    // If the field is downloadable add to the list of downloadable fields\n                    state.downloadableFields[category + \",\" + fieldName] = true;\n                }\n            }\n            return {\n                selectedFields: selectedFields,\n                fields: fields\n            };\n        });\n    },\n    getSessions: function() {\n        // Get the sessions to be selected\n\n        if(this.state.filter.children.length > 0) {\n            // If filter exists return filter sessions\n            return this.state.filter.session;\n        } else {\n            // Else return all sessions\n            return this.props.AllSessions;\n        }\n    },\n    runQuery: function(fields, sessions) {\n        // Run the current query\n\n        var DocTypes = [],\n            that = this,\n            semaphore = 0,\n            sectionedSessions,\n            ajaxComplete = function(){\n                // Wait until all ajax calls have completed before computing the rowdata\n                if(semaphore == 0){\n                    var rowdata = that.getRowData(that.state.grouplevel);\n                    that.setState({\n                        'rowData': rowdata,\n                        \"loading\" : false\n                    });\n                }\n            };\n\n        // Reset the rowData and sessiondata\n        this.setState({\n            \"rowData\" : {},\n            \"sessiondata\" : {},\n            \"loading\" : true\n        });\n\n        // Get list of DocTypes to be retrieved\n        for(var i = 0 ; i < fields.length; i += 1) {\n            var field_split = fields[i].split(\",\");\n            var category = field_split[0];\n\n            // Check if the current category has already been queried, if so skip\n            if(DocTypes.indexOf(category) === -1) {\n                var sessionInfo = [];\n\n                // Build the session data to be queried for the given category\n                for (var j = 0; j < this.state.filter.session.length; j++) {\n                    if (Array.isArray(this.state.filter.session[j])) {\n                        if(this.state.selectedFields[category].allVisits[this.state.filter.session[j][1]]) {\n                            sessionInfo.push(this.state.filter.session[j]);\n                        }\n                    } else {\n                        for (var key in this.state.selectedFields[category].allVisits) {\n                            var temp = [];\n\n                            temp.push(this.state.filter.session[j]);\n                            // Add the visit to the temp variable then add to the sessions to be queried\n                            temp.push(key);\n                            sessionInfo.push(temp);\n                        }\n                    }\n                }\n\n                DocTypes.push(category);\n                // keep track of the number of requests waiting for a response\n                semaphore++;\n                sectionedSessions = JSON.stringify(sessionInfo);\n                $.ajax({\n                    type: \"POST\",\n                    url: loris.BaseURL + \"/AjaxHelper.php?Module=dataquery&script=retrieveCategoryDocs.php\",\n                    data: {\n                        DocType: category,\n                        Sessions: sectionedSessions\n                    },\n                    dataType: 'text',\n                    success: function(data) {\n                        if(data) {\n                            var i, row, rows, identifier,\n                                sessiondata = that.state.sessiondata;\n                            data = JSON.parse(data);\n                            rows = data.rows;\n                            for(i = 0; i < rows.length; i += 1) {\n                                /*\n                                 * each row is a JSON object of the\n                                 * form:\n                                 * {\n                                 *  \"key\" : [category, pscid, vl],\n                                 *  \"value\" : [pscid, vl],\n                                 *  \"doc\": {\n                                 *      Meta: { stuff }\n                                 *      data: { \"FieldName\" : \"Value\", .. }\n                                 * }\n                                 */\n                                row = rows[i];\n                                identifier = row.value;\n                                if(!sessiondata.hasOwnProperty(identifier)) {\n                                    sessiondata[identifier] = {\n                                    }\n                                }\n\n                                sessiondata[identifier][row.key[0]] = row.doc;\n\n                            }\n                            that.setState({ 'sessiondata' : sessiondata});\n                        }\n                        console.log(\"Received data\");\n                        semaphore--;\n                        ajaxComplete();\n                    }\n                });\n            }\n        }\n    },\n    getRowData: function(displayID) {\n        // Build the queried data to be displayed in the data table\n\n        var sessiondata = this.state.sessiondata;\n        var sessions = this.getSessions();\n        var fields = this.state.fields.sort();\n        var downloadableFields = this.state.downloadableFields;\n        var i, j;\n        var rowdata = [];\n        var currow = [];\n        var Identifiers = [];\n        var RowHeaders = [];\n        var fileData = [];\n        var href;\n\n        if(displayID === 0) {\n            // Displaying the data in the cross-sectional way\n\n            // Add the fields as the tables headers\n            for(i = 0; fields && i < fields.length; i += 1) {\n                RowHeaders.push(fields[i]);\n            }\n\n            // Build the table rows, using the session data as the row identifier\n            for(var session in sessiondata){\n                currow = [];\n                for(i = 0; fields && i < fields.length; i += 1) {\n                    var fieldSplit = fields[i].split(\",\")\n                        currow[i] = '.';\n                    var sd = sessiondata[session];\n                    if(sd[fieldSplit[0]] && sd[fieldSplit[0]].data[fieldSplit[1]] && downloadableFields[fields[i]]) {\n                        // If the current field has data and is downloadable, create a download link\n                        href = loris.BaseURL + \"/mri/jiv/get_file.php?file=\" + sd[fieldSplit[0]].data[fieldSplit[1]];\n                        currow[i] = (\n                            <a href={href}>\n                                {sd[fieldSplit[0]].data[fieldSplit[1]]}\n                            </a>\n                        );\n                        fileData.push(\"file/\" + sd[fieldSplit[0]]._id + \"/\" + encodeURIComponent(sd[fieldSplit[0]].data[fieldSplit[1]]));\n                    } else if(sd[fieldSplit[0]]){\n                        // else if field is not null add data and string\n                        currow[i] = sd[fieldSplit[0]].data[fieldSplit[1]];\n                    }\n                }\n                rowdata.push(currow);\n                Identifiers.push(session);\n            }\n        } else {\n            // Displaying the data in the longitudinal way\n\n            var Visits = {},\n                visit, identifier, temp, colHeader, index, instrument, fieldSplit;\n\n            // Loop trough session data building the row identifiers and desired visits\n            for(var session in sessiondata){\n                temp = session.split(',');\n                visit = temp[1];\n                if (!Visits[visit]) {\n                    Visits[visit] = true;\n                }\n                identifier = temp[0];\n                if (Identifiers.indexOf(identifier) === -1) {\n                    Identifiers.push(identifier);\n                }\n            }\n\n            // Loop through the desired fields, adding a row header for each visit if it\n            // has been selected in the build phase\n            for(i = 0; fields && i < fields.length; i += 1) {\n                for(visit in Visits) {\n                    temp = fields[i].split(\",\");\n                    instrument = this.state.selectedFields[temp[0]]\n                    if(instrument && instrument[temp[1]] && instrument[temp[1]][visit]) {\n                        RowHeaders.push(visit + ' ' + fields[i])\n                    }\n                }\n            }\n\n            // Build the row data for the giving identifiers and headers\n            for(identifier in Identifiers){\n                currow = [];\n                for(colHeader in RowHeaders){\n                    temp = Identifiers[identifier] +',' + RowHeaders[colHeader].split(' ')[0];\n                    index = sessiondata[temp];\n                    if(!index){\n                        currow.push(\".\");\n                    } else {\n                        temp = index[RowHeaders[colHeader].split(',')[0].split(' ')[1]];\n                        fieldSplit = RowHeaders[colHeader].split(' ')[1].split(\",\")\n                        if(temp){\n                            if(temp.data[RowHeaders[colHeader].split(',')[1]] && downloadableFields[fieldSplit[0] +',' + fieldSplit[1]]) {\n                                // Add a downloadable link if the field is set and downloadable\n                                href = loris.BaseURL + \"/mri/jiv/get_file.php?file=\" + temp.data[RowHeaders[colHeader].split(',')[1]];\n                                temp = (\n                                    <a href={href}>\n                                        {temp.data[RowHeaders[colHeader].split(',')[1]]}\n                                    </a>\n                                );\n                            } else {\n                                temp = temp.data[RowHeaders[colHeader].split(',')[1]];\n                            }\n                        } else {\n                            temp = '.';\n                        }\n                        currow.push(temp);\n                    }\n                }\n                rowdata.push(currow);\n            }\n        }\n        return {'rowdata': rowdata, 'Identifiers': Identifiers, 'RowHeaders': RowHeaders, 'fileData': fileData};\n    },\n    dismissAlert: function() {\n        // Used to dismiss alerts\n        this.setState({\n            alertLoaded: false,\n            alertSaved: false,\n            alertConflict: {\n                show: false\n            }\n        });\n    },\n    resetQuery: function(){\n        // Used to reset the current query\n        this.setState({\n            fields: [],\n            criteria: {},\n            selectedFields : {}\n        });\n    },\n    changeDataDisplay: function(displayID){\n        // Change the display format of the data table\n        var rowdata = this.getRowData(displayID);\n        this.setState({\n            grouplevel: displayID,\n            rowData: rowdata\n        });\n    },\n    updateFilter: function(filter) {\n        // Update the filter\n        var that = this;\n        this.setState(function(state){\n            if(filter.children.length === 0){\n                filter.session = that.props.AllSessions\n            }\n            return {'filter' : filter}\n        });\n    },\n    render: function() {\n        // Renders the html for the component\n\n        var tabs = [], tabsNav = [], alert = <div />;\n\n        // Add the info tab\n        tabs.push(<InfoTabPane\n                TabId=\"Info\"\n                UpdatedTime={this.props.UpdatedTime}\n                Loading={this.state.loading}\n        />);\n\n        // Add the field select tab\n        tabs.push(<FieldSelectTabPane\n                TabId=\"DefineFields\"\n                categories={this.props.categories}\n                onFieldChange={this.fieldChange}\n                selectedFields={this.state.selectedFields}\n                Visits={this.props.Visits}\n                fieldVisitSelect = {this.fieldVisitSelect}\n                Loading={this.state.loading}\n        />);\n\n        // Add the filter builder tab\n        tabs.push(<FilterSelectTabPane\n                TabId=\"DefineFilters\"\n                categories={this.props.categories}\n                filter={this.state.filter}\n                updateFilter={this.updateFilter}\n                Visits={this.props.Visits}\n                Loading={this.state.loading}\n            />\n        );\n\n        // Define the data displayed type and add the view data tab\n        var displayType = (this.state.grouplevel === 0) ? \"Cross-sectional\" : \"Longitudinal\";\n        tabs.push(<ViewDataTabPane\n                TabId=\"ViewData\"\n                Fields={this.state.fields}\n                Criteria={this.state.criteria}\n                Sessions={this.getSessions()}\n                Data={this.state.rowData.rowdata}\n                RowInfo={this.state.rowData.Identifiers}\n                RowHeaders={this.state.rowData.RowHeaders}\n                FileData={this.state.rowData.fileData}\n                onRunQueryClicked={this.runQuery}\n                displayType={displayType}\n                changeDataDisplay={this.changeDataDisplay}\n                Loading={this.state.loading}\n        />);\n\n        // Add the stats tab\n        tabs.push(<StatsVisualizationTabPane\n                TabId=\"Statistics\"\n                Fields={this.state.rowData.RowHeaders}\n                Data={this.state.rowData.rowdata}\n                Loading={this.state.loading}\n        />);\n\n        // Add the manage saved queries tab\n        tabs.push(<ManageSavedQueriesTabPane TabId=\"SavedQueriesTab\"\n                        userQueries={this.state.queryIDs.User}\n                        globalQueries={this.state.queryIDs.Shared}\n                        onSaveQuery={this.saveCurrentQuery}\n                        queryDetails={this.state.savedQueries}\n                        queriesLoaded={this.state.queriesLoaded}\n                        Loading={this.state.loading}\n                />);\n\n        // Display load alert if alert is present\n        if(this.state.alertLoaded) {\n            alert = (\n                <div className=\"alert alert-success\" role=\"alert\">\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.dismissAlert}>\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    <strong>Success</strong> Query Loaded.\n                </div>\n            )\n        }\n\n        // Display save alert if alert is present\n        if(this.state.alertSaved) {\n            alert = (\n                <div className=\"alert alert-success\" role=\"alert\">\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.dismissAlert}>\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    <strong>Success</strong> Query Saved.\n                </div>\n            )\n        }\n\n        // Display Conflict Query alert\n        if(this.state.alertConflict.show) {\n            alert = (\n                <div className=\"alert alert-warning\" role=\"alert\">\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.dismissAlert}>\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.dismissAlert}>\n                        <span aria-hidden=\"true\">Override</span>\n                    </button>\n                    <strong>Error</strong> Query with the same name already exists. \n                    <a href=\"#\" class=\"alert-link\" onClick={this.overrideQuery}>Click here to override</a>\n                </div>\n            )\n        }\n\n        var widthClass = \"col-md-12\";\n        var sideBar = <div />\n\n        // Display the field sidebar for certain tabs\n        if(this.state.fields.length > 0\n            && this.state.ActiveTab !== 'ViewData'\n            && this.state.ActiveTab !== 'Statistics'\n            && this.state.ActiveTab !== 'Info'\n        ) {\n            widthClass = \"col-md-10\";\n            sideBar = <div className=\"col-md-2\">\n                    <FieldsSidebar\n                        Fields={this.state.fields}\n                        Criteria={this.state.criteria}\n                        resetQuery={this.resetQuery}\n                    />\n                </div>;\n        }\n        return <div>\n                    {alert}\n                    <div className={widthClass}>\n                        <nav className=\"nav nav-tabs\">\n                            <ul className=\"nav nav-tabs navbar-left\" data-tabs=\"tabs\">\n                                <li role=\"presentation\" className=\"active\"><a href=\"#Info\" data-toggle=\"tab\">Info</a></li>\n                                <li role=\"presentation\"><a href=\"#DefineFields\" data-toggle=\"tab\">Define Fields</a></li>\n                                <li role=\"presentation\"><a href=\"#DefineFilters\" data-toggle=\"tab\">Define Filters</a></li>\n                                <li role=\"presentation\"><a href=\"#ViewData\" data-toggle=\"tab\">View Data</a></li>\n                                <li role=\"presentation\"><a href=\"#Statistics\" data-toggle=\"tab\">Statistical Analysis</a></li>\n                            </ul>\n                            <SavedQueriesList\n                                userQueries={this.state.queryIDs.User}\n                                globalQueries={this.state.queryIDs.Shared}\n                                queryDetails={this.state.savedQueries}\n                                queriesLoaded={this.state.queriesLoaded}\n                                onSelectQuery={this.loadSavedQuery}\n                                loadedQuery={this.state.loadedQuery}\n                            />\n                        </nav>\n                        <div className=\"tab-content\">\n                            {tabs}\n                        </div>\n                    </div>\n                    {sideBar}\n\n            </div>;\n    }\n});\n\nwindow.SavedQueriesList = SavedQueriesList;\nwindow.DataQueryApp = DataQueryApp;\nwindow.RDataQueryApp = React.createFactory(DataQueryApp);\n\nexport default DataQueryApp;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/dataquery/jsx/react.app.js"],"sourceRoot":""}