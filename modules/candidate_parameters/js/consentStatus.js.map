{"version":3,"sources":["webpack:///modules/candidate_parameters/js/consentStatus.js","webpack:///webpack/bootstrap 036ba4bef008cda13c0b?cb59*************","webpack:///./modules/candidate_parameters/jsx/consentStatus.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Object","defineProperty","value","ConsentStatus","React","createClass","displayName","getInitialState","consentOptions","yes","no","Data","formData","updateResult","errorMessage","isLoaded","loadedData","componentDidMount","that","this","$","ajax","props","dataURL","dataType","xhr","window","XMLHttpRequest","addEventListener","evt","setState","success","data","consents","consentStatus","hasOwnProperty","consentDate","consentDate2","consentWithdrawal","consentWithdrawal2","consentStatuses","consentDates","withdrawals","error","errorCode","errorMsg","setFormData","formElement","state","onSubmit","e","preventDefault","render","undefined","createElement","className","disabled","updateButton","loris","userHasPermission","ButtonElement","label","dateRequired","withdrawalRequired","i","consent","withdrawal","consentDateLabel","consentDateConfirmationLabel","consentWithdrawalLabel","consentWithdrawalConfirmationLabel","push","SelectElement","name","options","onUserInput","ref","required","DateElement","formattedHistory","consentKey","history","consentLabel","consentType","field","line","historyConsent","field2","current","alertMessage","alertClass","class","role","FormElement","handleSubmit","StaticElement","text","pscid","candID","myFormData","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","date1","date2","alert","self","FormData","key","append","tabName","type","url","action","cache","contentType","processData","showAlertMessage","err","responseText","JSON","parse","message","refs","alertMsg","fadeTo","delay","slideUp","RConsentStatus","createFactory","default"],"mappings":"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","file":"./modules/candidate_parameters/js/consentStatus.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/* exported RConsentStatus */\n\t\n\tvar ConsentStatus = React.createClass({\n\t  displayName: \"ConsentStatus\",\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      consentOptions: {\n\t        yes: \"Yes\",\n\t        no: \"No\"\n\t      },\n\t      Data: [],\n\t      formData: {},\n\t      updateResult: null,\n\t      errorMessage: null,\n\t      isLoaded: false,\n\t      loadedData: 0\n\t    };\n\t  },\n\t  componentDidMount: function componentDidMount() {\n\t    var that = this;\n\t    $.ajax(this.props.dataURL, {\n\t      dataType: 'json',\n\t      xhr: function xhr() {\n\t        var xhr = new window.XMLHttpRequest();\n\t        xhr.addEventListener(\"progress\", function (evt) {\n\t          that.setState({\n\t            loadedData: evt.loaded\n\t          });\n\t        });\n\t        return xhr;\n\t      },\n\t      success: function success(data) {\n\t        var formData = {};\n\t        var consents = data.consents;\n\t        for (var consentStatus in consents) {\n\t          if (consents.hasOwnProperty(consentStatus)) {\n\t            var consentDate = consentStatus + \"_date\";\n\t            var consentDate2 = consentStatus + \"_date2\";\n\t            var consentWithdrawal = consentStatus + \"_withdrawal\";\n\t            var consentWithdrawal2 = consentStatus + \"_withdrawal2\";\n\t            formData[consentStatus] = data.consentStatuses[consentStatus];\n\t            formData[consentDate] = data.consentDates[consentStatus];\n\t            formData[consentDate2] = data.consentDates[consentStatus];\n\t            formData[consentWithdrawal] = data.withdrawals[consentStatus];\n\t            formData[consentWithdrawal2] = data.withdrawals[consentStatus];\n\t          }\n\t        }\n\t\n\t        that.setState({\n\t          Data: data,\n\t          formData: formData,\n\t          isLoaded: true\n\t        });\n\t      },\n\t      error: function error(data, errorCode, errorMsg) {\n\t        that.setState({\n\t          error: 'An error occurred when loading the form!'\n\t        });\n\t      }\n\t    });\n\t  },\n\t  setFormData: function setFormData(formElement, value) {\n\t    var formData = this.state.formData;\n\t    formData[formElement] = value;\n\t    this.setState({\n\t      formData: formData\n\t    });\n\t  },\n\t  onSubmit: function onSubmit(e) {\n\t    e.preventDefault();\n\t  },\n\t  render: function render() {\n\t    if (!this.state.isLoaded) {\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          \"div\",\n\t          { className: \"alert alert-danger text-center\" },\n\t          React.createElement(\n\t            \"strong\",\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        \"button\",\n\t        { className: \"btn-info has-spinner\" },\n\t        \"Loading\",\n\t        React.createElement(\"span\", {\n\t          className: \"glyphicon glyphicon-refresh glyphicon-refresh-animate\"\n\t        })\n\t      );\n\t    }\n\t\n\t    var disabled = true;\n\t    var updateButton = null;\n\t    if (loris.userHasPermission('candidate_parameter_edit')) {\n\t      disabled = false;\n\t      updateButton = React.createElement(ButtonElement, { label: \"Update\" });\n\t    }\n\t    var dateRequired = [];\n\t    var withdrawalRequired = [];\n\t    var i = 0;\n\t    for (var consent in this.state.Data.consents) {\n\t      if (this.state.Data.consents.hasOwnProperty(consent)) {\n\t        var withdrawal = consent + \"_withdrawal\";\n\t\n\t        if (this.state.formData[consent] === \"yes\") {\n\t          dateRequired[i] = true;\n\t        }\n\t        if (this.state.formData[withdrawal]) {\n\t          withdrawalRequired[i] = true;\n\t        } else {\n\t          withdrawalRequired[i] = false;\n\t        }\n\t        i++;\n\t      }\n\t    }\n\t\n\t    var consents = [];\n\t    i = 0;\n\t    for (var consentStatus in this.state.Data.consents) {\n\t      if (this.state.Data.consents.hasOwnProperty(consentStatus)) {\n\t        var label = this.state.Data.consents[consentStatus];\n\t        var consentDate = consentStatus + \"_date\";\n\t        var consentDate2 = consentStatus + \"_date2\";\n\t        var consentDateLabel = \"Date of \" + label;\n\t        var consentDateConfirmationLabel = \"Confirmation Date of \" + label;\n\t        var consentWithdrawal = consentStatus + \"_withdrawal\";\n\t        var consentWithdrawal2 = consentStatus + \"_withdrawal2\";\n\t        var consentWithdrawalLabel = \"Date of Withdrawal of \" + label;\n\t        var consentWithdrawalConfirmationLabel = \"Confirmation Date of Withdrawal of \" + label;\n\t\n\t        consents.push(React.createElement(SelectElement, {\n\t          label: label,\n\t          name: consentStatus,\n\t          options: this.state.consentOptions,\n\t          value: this.state.Data.consentStatuses[consentStatus],\n\t          onUserInput: this.setFormData,\n\t          ref: consentStatus,\n\t          disabled: disabled,\n\t          required: false\n\t        }));\n\t        consents.push(React.createElement(DateElement, {\n\t          label: consentDateLabel,\n\t          name: consentDate,\n\t          value: this.state.Data.consentDates[consentStatus],\n\t          onUserInput: this.setFormData,\n\t          ref: consentDate,\n\t          disabled: disabled,\n\t          required: dateRequired[i]\n\t        }));\n\t        consents.push(React.createElement(DateElement, {\n\t          label: consentDateConfirmationLabel,\n\t          name: consentDate2,\n\t          value: this.state.Data.consentDates[consentStatus],\n\t          onUserInput: this.setFormData,\n\t          ref: consentDate2,\n\t          disabled: disabled,\n\t          required: dateRequired[i]\n\t        }));\n\t        consents.push(React.createElement(DateElement, {\n\t          label: consentWithdrawalLabel,\n\t          name: consentWithdrawal,\n\t          value: this.state.Data.withdrawals[consentStatus],\n\t          onUserInput: this.setFormData,\n\t          ref: consentWithdrawal,\n\t          disabled: disabled,\n\t          required: false\n\t        }));\n\t        consents.push(React.createElement(DateElement, {\n\t          label: consentWithdrawalConfirmationLabel,\n\t          name: consentWithdrawal2,\n\t          value: this.state.Data.withdrawals[consentStatus],\n\t          onUserInput: this.setFormData,\n\t          ref: consentWithdrawal2,\n\t          disabled: disabled,\n\t          required: withdrawalRequired[i]\n\t        }));\n\t        consents.push(React.createElement(\"hr\", null));\n\t\n\t        i++;\n\t      }\n\t    }\n\t\n\t    var formattedHistory = [];\n\t    for (var consentKey in this.state.Data.history) {\n\t      if (this.state.Data.history.hasOwnProperty(consentKey)) {\n\t        var consentLabel = this.state.Data.history[consentKey].label;\n\t        var consentType = this.state.Data.history[consentKey].consentType;\n\t        for (var field in this.state.Data.history[consentKey]) {\n\t          if (this.state.Data.history[consentKey].hasOwnProperty(field)) {\n\t            var line = \"\";\n\t            var historyConsent = this.state.Data.history[consentKey][field];\n\t            for (var field2 in historyConsent) {\n\t              if (historyConsent.hasOwnProperty(field2)) {\n\t                var current = historyConsent[field2];\n\t                if (current !== null) {\n\t                  switch (field2) {\n\t                    case 'data_entry_date':\n\t                      line += \"[\";\n\t                      line += current;\n\t                      line += \"] \";\n\t                      break;\n\t                    case 'entry_staff':\n\t                      line += current;\n\t                      line += \" \";\n\t                      break;\n\t                    case consentType:\n\t                      line += consentLabel + \" Status: \";\n\t                      line += current;\n\t                      line += \" \";\n\t                      break;\n\t                    case consentType + '_date':\n\t                      line += \"Date of Consent: \";\n\t                      line += current;\n\t                      line += \" \";\n\t                      break;\n\t                    case consentType + '_withdrawal':\n\t                      line += \"Date of Consent Withdrawal: \";\n\t                      line += current;\n\t                      line += \" \";\n\t                      break;\n\t                    default:\n\t                  }\n\t                }\n\t              }\n\t            }\n\t            formattedHistory.push(React.createElement(\n\t              \"p\",\n\t              null,\n\t              line\n\t            ));\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    var alertMessage = \"\";\n\t    var alertClass = \"alert text-center hide\";\n\t    if (this.state.updateResult) {\n\t      if (this.state.updateResult === \"success\") {\n\t        alertClass = \"alert alert-success text-center\";\n\t        alertMessage = \"Update Successful!\";\n\t      } else if (this.state.updateResult === \"error\") {\n\t        var errorMessage = this.state.errorMessage;\n\t        alertClass = \"alert alert-danger text-center\";\n\t        alertMessage = errorMessage ? errorMessage : \"Failed to update!\";\n\t      }\n\t    }\n\t\n\t    return React.createElement(\n\t      \"div\",\n\t      { \"class\": \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: alertClass, role: \"alert\", ref: \"alert-message\" },\n\t        alertMessage\n\t      ),\n\t      React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"consentStatus\",\n\t          onSubmit: this.handleSubmit,\n\t          ref: \"form\",\n\t          \"class\": \"col-md-6\"\n\t        },\n\t        React.createElement(StaticElement, {\n\t          label: \"PSCID\",\n\t          text: this.state.Data.pscid\n\t        }),\n\t        React.createElement(StaticElement, {\n\t          label: \"DCCID\",\n\t          text: this.state.Data.candID\n\t        }),\n\t        consents,\n\t        updateButton,\n\t        formattedHistory\n\t      )\n\t    );\n\t  },\n\t  /**\n\t  * Handles form submission\n\t  *\n\t  * @param {event} e - Form submission event\n\t  */\n\t  handleSubmit: function handleSubmit(e) {\n\t    e.preventDefault();\n\t    var myFormData = this.state.formData;\n\t    var today = new Date();\n\t    var dd = today.getDate();\n\t    var mm = today.getMonth() + 1; // January is 0!\n\t    var yyyy = today.getFullYear();\n\t    if (dd < 10) {\n\t      dd = '0' + dd;\n\t    }\n\t    if (mm < 10) {\n\t      mm = '0' + mm;\n\t    }\n\t    today = yyyy + '-' + mm + '-' + dd;\n\t    for (var consentStatus in this.state.Data.consents) {\n\t      if (this.state.Data.consents.hasOwnProperty(consentStatus)) {\n\t        var label = this.state.Data.consents[consentStatus];\n\t\n\t        var consentDate = consentStatus + \"_date\";\n\t        var consentDate2 = consentStatus + \"_date2\";\n\t\n\t        var date1 = myFormData[consentDate] ? myFormData[consentDate] : null;\n\t        var date2 = myFormData[consentDate2] ? myFormData[consentDate2] : null;\n\t\n\t        if (date1 !== date2) {\n\t          alert(label + \" dates do not match!\");\n\t          return;\n\t        }\n\t        if (date1 > today) {\n\t          alert(label + \" date cannot be later than today!\");\n\t          return;\n\t        }\n\t\n\t        var consentWithdrawal = consentStatus + \"_withdrawal\";\n\t        var consentWithdrawal2 = consentStatus + \"_withdrawal2\";\n\t\n\t        date1 = myFormData[consentWithdrawal] ? myFormData[consentWithdrawal] : null;\n\t        date2 = myFormData[consentWithdrawal2] ? myFormData[consentWithdrawal2] : null;\n\t\n\t        if (date1 !== date2) {\n\t          alert(label + \" withdrawal dates do not match!\");\n\t          return;\n\t        }\n\t        if (date1 > today) {\n\t          alert(label + \" withdrawal date cannot be later than today!\");\n\t          return;\n\t        }\n\t      }\n\t    }\n\t\n\t    // Set form data\n\t    var self = this;\n\t    var formData = new FormData();\n\t    for (var key in myFormData) {\n\t      if (myFormData[key] !== \"\") {\n\t        formData.append(key, myFormData[key]);\n\t      }\n\t    }\n\t\n\t    formData.append('tab', this.props.tabName);\n\t    formData.append('candID', this.state.Data.candID);\n\t    $.ajax({\n\t      type: 'POST',\n\t      url: self.props.action,\n\t      data: formData,\n\t      cache: false,\n\t      contentType: false,\n\t      processData: false,\n\t      success: function success(data) {\n\t        self.setState({\n\t          updateResult: \"success\"\n\t        });\n\t        self.showAlertMessage();\n\t      },\n\t      error: function error(err) {\n\t        if (err.responseText !== \"\") {\n\t          var errorMessage = JSON.parse(err.responseText).message;\n\t          self.setState({\n\t            updateResult: \"error\",\n\t            errorMessage: errorMessage\n\t          });\n\t          self.showAlertMessage();\n\t        }\n\t      }\n\t\n\t    });\n\t  },\n\t  /**\n\t  * Display a success/error alert message after form submission\n\t  */\n\t  showAlertMessage: function showAlertMessage() {\n\t    var self = this;\n\t    if (this.refs[\"alert-message\"] === null) {\n\t      return;\n\t    }\n\t\n\t    var alertMsg = this.refs[\"alert-message\"];\n\t    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n\t      self.setState({\n\t        updateResult: null\n\t      });\n\t    });\n\t  }\n\t\n\t});\n\t\n\tvar RConsentStatus = React.createFactory(ConsentStatus);\n\t\n\twindow.ConsentStatus = ConsentStatus;\n\twindow.RConsentStatus = RConsentStatus;\n\t\n\texports.default = ConsentStatus;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/candidate_parameters/js/consentStatus.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 036ba4bef008cda13c0b","/* exported RConsentStatus */\n\nvar ConsentStatus = React.createClass(\n  {\n    getInitialState: function() {\n      return {\n        consentOptions: {\n          yes: \"Yes\",\n          no: \"No\"\n        },\n        Data: [],\n        formData: {},\n        updateResult: null,\n        errorMessage: null,\n        isLoaded: false,\n        loadedData: 0\n      };\n    },\n    componentDidMount: function() {\n      var that = this;\n      $.ajax(\n                this.props.dataURL,\n        {\n          dataType: 'json',\n          xhr: function() {\n            var xhr = new window.XMLHttpRequest();\n            xhr.addEventListener(\n                            \"progress\",\n                            function(evt) {\n                              that.setState(\n                                {\n                                  loadedData: evt.loaded\n                                }\n                                );\n                            }\n                        );\n            return xhr;\n          },\n          success: function(data) {\n            var formData = {};\n            var consents = data.consents;\n            for (var consentStatus in consents) {\n              if (consents.hasOwnProperty(consentStatus)) {\n                var consentDate = consentStatus + \"_date\";\n                var consentDate2 = consentStatus + \"_date2\";\n                var consentWithdrawal = consentStatus + \"_withdrawal\";\n                var consentWithdrawal2 = consentStatus + \"_withdrawal2\";\n                formData[consentStatus] = data.consentStatuses[consentStatus];\n                formData[consentDate] = data.consentDates[consentStatus];\n                formData[consentDate2] = data.consentDates[consentStatus];\n                formData[consentWithdrawal] = data.withdrawals[consentStatus];\n                formData[consentWithdrawal2] = data.withdrawals[consentStatus];\n              }\n            }\n\n            that.setState(\n              {\n                Data: data,\n                formData: formData,\n                isLoaded: true\n              }\n                        );\n          },\n          error: function(data, errorCode, errorMsg) {\n            that.setState(\n              {\n                error: 'An error occurred when loading the form!'\n              }\n                        );\n          }\n        }\n            );\n    },\n    setFormData: function(formElement,\n    value) {\n      var formData = this.state.formData;\n      formData[formElement] = value;\n      this.setState(\n        {\n          formData: formData\n        }\n            );\n    },\n    onSubmit: function(e) {\n      e.preventDefault();\n    },\n    render: function() {\n      if (!this.state.isLoaded) {\n        if (this.state.error !== undefined) {\n          return (\n                    <div className =\"alert alert-danger text-center\">\n                        <strong>\n                            {this.state.error}\n                        </strong>\n                    </div>\n                    );\n        }\n\n        return (\n                <button className =\"btn-info has-spinner\">\n                    Loading\n                    <span\n                        className =\"glyphicon glyphicon-refresh\n                        glyphicon-refresh-animate\"\n                    >\n                    </span>\n                </button>\n                );\n      }\n\n      var disabled = true;\n      var updateButton = null;\n      if (loris.userHasPermission('candidate_parameter_edit')) {\n        disabled = false;\n        updateButton = <ButtonElement label =\"Update\" />;\n      }\n      var dateRequired = [];\n      var withdrawalRequired = [];\n      var i = 0;\n      for (var consent in this.state.Data.consents) {\n        if (this.state.Data.consents.hasOwnProperty(consent)) {\n          var withdrawal = consent + \"_withdrawal\";\n\n          if (this.state.formData[consent] === \"yes\") {\n            dateRequired[i] = true;\n          }\n          if (this.state.formData[withdrawal]) {\n            withdrawalRequired[i] = true;\n          } else {\n            withdrawalRequired[i] = false;\n          }\n          i++;\n        }\n      }\n\n      var consents = [];\n      i = 0;\n      for (var consentStatus in this.state.Data.consents) {\n        if (this.state.Data.consents.hasOwnProperty(consentStatus)) {\n          var label = this.state.Data.consents[consentStatus];\n          var consentDate = consentStatus + \"_date\";\n          var consentDate2 = consentStatus + \"_date2\";\n          var consentDateLabel = \"Date of \" + label;\n          var consentDateConfirmationLabel = \"Confirmation Date of \" + label;\n          var consentWithdrawal = consentStatus + \"_withdrawal\";\n          var consentWithdrawal2 = consentStatus + \"_withdrawal2\";\n          var consentWithdrawalLabel = \"Date of Withdrawal of \" + label;\n          var consentWithdrawalConfirmationLabel =\n            \"Confirmation Date of Withdrawal of \" + label;\n\n          consents.push(\n                        <SelectElement\n                        label ={label}\n                        name ={consentStatus}\n                        options ={this.state.consentOptions}\n                        value ={this.state.Data.consentStatuses[consentStatus]}\n                        onUserInput ={this.setFormData}\n                        ref ={consentStatus}\n                        disabled ={disabled}\n                        required ={false}\n                        />\n                    );\n          consents.push(\n                        <DateElement\n                        label ={consentDateLabel}\n                        name ={consentDate}\n                        value ={this.state.Data.consentDates[consentStatus]}\n                        onUserInput ={this.setFormData}\n                        ref ={consentDate}\n                        disabled ={disabled}\n                        required ={dateRequired[i]}\n                        />\n                    );\n          consents.push(\n                        <DateElement\n                        label ={consentDateConfirmationLabel}\n                        name ={consentDate2}\n                        value ={this.state.Data.consentDates[consentStatus]}\n                        onUserInput ={this.setFormData}\n                        ref ={consentDate2}\n                        disabled ={disabled}\n                        required ={dateRequired[i]}\n                        />\n                    );\n          consents.push(\n                        <DateElement\n                        label ={consentWithdrawalLabel}\n                        name ={consentWithdrawal}\n                        value ={this.state.Data.withdrawals[consentStatus]}\n                        onUserInput ={this.setFormData}\n                        ref ={consentWithdrawal}\n                        disabled ={disabled}\n                        required ={false}\n                        />\n                    );\n          consents.push(\n                        <DateElement\n                        label ={consentWithdrawalConfirmationLabel}\n                        name ={consentWithdrawal2}\n                        value ={this.state.Data.withdrawals[consentStatus]}\n                        onUserInput ={this.setFormData}\n                        ref ={consentWithdrawal2}\n                        disabled ={disabled}\n                        required ={withdrawalRequired[i]}\n                        />\n                    );\n          consents.push(<hr />);\n\n          i++;\n        }\n      }\n\n      var formattedHistory = [];\n      for (var consentKey in this.state.Data.history) {\n        if (this.state.Data.history.hasOwnProperty(consentKey)) {\n          var consentLabel = this.state.Data.history[consentKey].label;\n          var consentType = this.state.Data.history[consentKey].consentType;\n          for (var field in this.state.Data.history[consentKey]) {\n            if (this.state.Data.history[consentKey].hasOwnProperty(field)) {\n              var line = \"\";\n              var historyConsent = this.state.Data.history[consentKey][field];\n              for (var field2 in historyConsent) {\n                if (historyConsent.hasOwnProperty(field2)) {\n                  var current = historyConsent[field2];\n                  if (current !== null) {\n                    switch (field2) {\n                      case 'data_entry_date':\n                        line += \"[\";\n                        line += current;\n                        line += \"] \";\n                        break;\n                      case 'entry_staff':\n                        line += current;\n                        line += \" \";\n                        break;\n                      case consentType:\n                        line += consentLabel + \" Status: \";\n                        line += current;\n                        line += \" \";\n                        break;\n                      case consentType + '_date':\n                        line += \"Date of Consent: \";\n                        line += current;\n                        line += \" \";\n                        break;\n                      case consentType + '_withdrawal':\n                        line += \"Date of Consent Withdrawal: \";\n                        line += current;\n                        line += \" \";\n                        break;\n                      default:\n                    }\n                  }\n                }\n              }\n              formattedHistory.push(<p>{line}</p>);\n            }\n          }\n        }\n      }\n\n      var alertMessage = \"\";\n      var alertClass = \"alert text-center hide\";\n      if (this.state.updateResult) {\n        if (this.state.updateResult === \"success\") {\n          alertClass = \"alert alert-success text-center\";\n          alertMessage = \"Update Successful!\";\n        } else if (this.state.updateResult === \"error\") {\n          var errorMessage = this.state.errorMessage;\n          alertClass = \"alert alert-danger text-center\";\n          alertMessage = errorMessage ? errorMessage : \"Failed to update!\";\n        }\n      }\n\n      return (\n          <div class=\"row\">\n                <div className ={alertClass} role=\"alert\" ref=\"alert-message\">\n                    {alertMessage}\n                </div>\n            <FormElement\n                name =\"consentStatus\"\n                onSubmit ={this.handleSubmit}\n                ref =\"form\"\n                class =\"col-md-6\"\n            >\n                <StaticElement\n                    label =\"PSCID\"\n                    text ={this.state.Data.pscid}\n                />\n                <StaticElement\n                    label =\"DCCID\"\n                    text ={this.state.Data.candID}\n                />\n                {consents}\n                {updateButton}\n                {formattedHistory}\n\n            </FormElement>\n                </div>\n            );\n    },\n        /**\n     * Handles form submission\n     *\n     * @param {event} e - Form submission event\n     */\n    handleSubmit: function(e) {\n      e.preventDefault();\n      var myFormData = this.state.formData;\n      var today = new Date();\n      var dd = today.getDate();\n      var mm = today.getMonth() + 1; // January is 0!\n      var yyyy = today.getFullYear();\n      if (dd < 10) {\n        dd = '0' + dd;\n      }\n      if (mm < 10) {\n        mm = '0' + mm;\n      }\n      today = yyyy + '-' + mm + '-' + dd;\n      for (var consentStatus in this.state.Data.consents) {\n        if (this.state.Data.consents.hasOwnProperty(consentStatus)) {\n          var label = this.state.Data.consents[consentStatus];\n\n          var consentDate = consentStatus + \"_date\";\n          var consentDate2 = consentStatus + \"_date2\";\n\n          var date1 = myFormData[consentDate] ?\n                    myFormData[consentDate] : null;\n          var date2 = myFormData[consentDate2] ?\n                    myFormData[consentDate2] : null;\n\n          if (date1 !== date2) {\n            alert(label + \" dates do not match!\");\n            return;\n          }\n          if (date1 > today) {\n            alert(label + \" date cannot be later than today!\");\n            return;\n          }\n\n          var consentWithdrawal = consentStatus + \"_withdrawal\";\n          var consentWithdrawal2 = consentStatus + \"_withdrawal2\";\n\n          date1 = myFormData[consentWithdrawal] ?\n                    myFormData[consentWithdrawal] : null;\n          date2 = myFormData[consentWithdrawal2] ?\n                    myFormData[consentWithdrawal2] : null;\n\n          if (date1 !== date2) {\n            alert(label + \" withdrawal dates do not match!\");\n            return;\n          }\n          if (date1 > today) {\n            alert(label + \" withdrawal date cannot be later than today!\");\n            return;\n          }\n        }\n      }\n\n            // Set form data\n      var self = this;\n      var formData = new FormData();\n      for (var key in myFormData) {\n        if (myFormData[key] !== \"\") {\n          formData.append(key, myFormData[key]);\n        }\n      }\n\n      formData.append('tab', this.props.tabName);\n      formData.append('candID', this.state.Data.candID);\n      $.ajax(\n        {\n          type: 'POST',\n          url: self.props.action,\n          data: formData,\n          cache: false,\n          contentType: false,\n          processData: false,\n          success: function(data) {\n            self.setState(\n              {\n                updateResult: \"success\"\n              }\n                        );\n            self.showAlertMessage();\n          },\n          error: function(err) {\n            if (err.responseText !== \"\") {\n              var errorMessage = JSON.parse(err.responseText).message;\n              self.setState(\n                {\n                  updateResult: \"error\",\n                  errorMessage: errorMessage\n                }\n                    );\n              self.showAlertMessage();\n            }\n          }\n\n        }\n      );\n    },\n        /**\n     * Display a success/error alert message after form submission\n     */\n    showAlertMessage: function() {\n      var self = this;\n      if (this.refs[\"alert-message\"] === null) {\n        return;\n      }\n\n      var alertMsg = this.refs[\"alert-message\"];\n      $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(\n                500,\n                function() {\n                  self.setState(\n                    {\n                      updateResult: null\n                    }\n                    );\n                }\n            );\n    }\n\n  }\n);\n\nvar RConsentStatus = React.createFactory(ConsentStatus);\n\nwindow.ConsentStatus = ConsentStatus;\nwindow.RConsentStatus = RConsentStatus;\n\nexport default ConsentStatus;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/candidate_parameters/jsx/consentStatus.js"],"sourceRoot":""}